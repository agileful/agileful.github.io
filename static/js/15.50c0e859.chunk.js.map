{"version":3,"sources":["modules/dashboard/sprints/services/sprint-service.js","modules/dashboard/sprints/components/sprint-list-modal/index.jsx","modules/dashboard/sprints/components/sprint-page/index.jsx"],"names":["current","projectId","get","id","a","async","request","method","url","response","deserialize","data","status","list","options","queryString","sort","page","append","serializeQueryString","create","sprint","serialize","Error","errors","detail","edit","destroy","SprintListModal","props","useProjectId","useState","sprints","setSprints","then","Modal","isOpen","toggle","ModalHeader","ModalBody","SprintTable","map","key","fromDate","toDate","className","to","icon","faEye","styled","table","SprintPage","booting","board","setBootState","params","useParams","useContext","PageContext","setPageTitle","setPageTitleOptions","useEffect","sprintId","getBoard","boot","SprintOptions","nowDate","Date","expired","parseISO","Fragment","history","useHistory","listModal","setListModal","toggleListModal","SprintDetails","SprintActionButton","onClick","push","faPen","faList","span","button"],"mappings":"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","file":"static/js/15.50c0e859.chunk.js","sourcesContent":["import { request, serializeQueryString } from '../../../core/client'\nimport { serialize, deserialize } from 'jsonapi-fractal'\n\nexport function current (projectId) {\n  return get(projectId, 'current')\n}\n\nexport async function get (projectId, id) {\n  try {\n    const response = await request({\n      method: 'GET',\n      url: `/dashboard/projects/${projectId}/sprints/${id}`\n    })\n\n    return deserialize(response.data)\n  } catch (e) {\n    if (e.response && e.response.status === 404) {\n      return null\n    }\n\n    throw e\n  }\n}\n\nexport async function list (projectId, options) {\n  const queryString = {}\n\n  if (options.sort) {\n    queryString.sort = options.sort\n  }\n\n  if (options.page) {\n    queryString.page = options.page\n  }\n\n  const append = queryString ? ('?' + serializeQueryString(queryString)) : ''\n\n  const response = await request({\n    method: 'GET',\n    url: `/dashboard/projects/${projectId}/sprints` + append\n  })\n\n  return deserialize(response.data)\n}\n\nexport async function create (projectId, sprint) {\n  let response\n\n  try {\n    response = await request({\n      method: 'POST',\n      url: `/dashboard/projects/${projectId}/sprints`,\n      data: serialize(sprint, 'sprints')\n    })\n  } catch (e) {\n    throw new Error(e.response.data.errors[0].detail)\n  }\n\n  return deserialize(response.data)\n}\n\nexport async function edit (projectId, id, sprint) {\n  let response\n\n  try {\n    response = await request({\n      method: 'PATCH',\n      url: `/dashboard/projects/${projectId}/sprints/${id}`,\n      data: serialize(sprint, 'sprints')\n    })\n  } catch (e) {\n    throw new Error(e.response.data.errors[0].detail)\n  }\n\n  return deserialize(response.data)\n}\n\nexport async function destroy (projectId, id) {\n  await request({\n    method: 'DELETE',\n    url: `/dashboard/projects/${projectId}/sprints/${id}`\n  })\n\n  return true\n}\n","import React, { useState } from 'react'\nimport LoadingContent from '../../../theme/components/loading-content'\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap'\nimport { Link } from 'react-router-dom'\nimport { list } from '../../services/sprint-service'\nimport { useProjectId } from '../../../projects/hooks'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faEye } from '@fortawesome/free-solid-svg-icons'\nimport styled from 'styled-components'\n\nexport default function SprintListModal (props) {\n  const projectId = useProjectId()\n  const [sprints, setSprints] = useState(null)\n\n  if (sprints === null) {\n    list(projectId, {\n      sort: '-fromDate'\n    }).then(setSprints)\n\n    return (\n      <Modal isOpen={props.isOpen} toggle={props.toggle}>\n        <ModalHeader toggle={props.toggle}>\n          Sprints\n        </ModalHeader>\n        <ModalBody>\n          <LoadingContent />\n        </ModalBody>\n      </Modal>\n    )\n  }\n\n  return (\n    <Modal isOpen={props.isOpen} toggle={props.toggle}>\n      <ModalHeader toggle={props.toggle}>\n        Sprints\n      </ModalHeader>\n      <ModalBody>\n        <SprintTable>\n          <tbody>\n            {sprints.map((sprint) => (\n              <tr key={sprint.id}>\n                <td>\n                  Sprint {sprint.fromDate} to {sprint.toDate}\n                </td>\n                <td className=\"actions-column\">\n                  <Link\n                    to={`/dashboard/projects/${projectId}/sprints/${sprint.id}`}\n                    className=\"btn btn-primary btn-sm\">\n                    <FontAwesomeIcon icon={faEye} /> View\n                  </Link>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </SprintTable>\n      </ModalBody>\n    </Modal>\n  )\n}\n\nconst SprintTable = styled.table`\n  width: 100%;\n\n  .actions-column {\n    text-align: right;\n  }\n\n  tr:nth-child(odd) td {\n    background-color: #eee;\n  }\n`\n","import React, { useState, useContext, useEffect } from 'react'\nimport LoadingContent from '../../../theme/components/loading-content'\nimport { Link, useParams, useHistory } from 'react-router-dom'\nimport { useProjectId } from '../../../projects/hooks'\nimport { get } from '../../services/sprint-service'\nimport { get as getBoard } from '../../../boards/services/board-service'\nimport BoardPage from '../../../boards/components/board-page'\nimport PageContext from '../../../theme/components/page/page-context'\nimport styled from 'styled-components'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPen, faList } from '@fortawesome/free-solid-svg-icons'\nimport { parseISO } from 'date-fns'\nimport SprintListModal from '../sprint-list-modal'\n\nexport default function SprintPage (props) {\n  const projectId = useProjectId()\n  const [{ sprint, board, booting }, setBootState] = useState({ booting: true })\n  const params = useParams()\n\n  const { setPageTitle, setPageTitleOptions } = useContext(PageContext)\n\n  setPageTitle('Sprint')\n\n  useEffect(() => {\n    setBootState({ booting: true })\n    async function boot () {\n      let sprint\n      if (props.sprint) {\n        sprint = props.sprint\n      } else {\n        sprint = await get(projectId, params.sprintId)\n      }\n\n      const board = await getBoard(projectId, sprint.board.id)\n\n      return {\n        booting: false,\n        board,\n        sprint\n      }\n    }\n\n    boot().then(setBootState)\n  }, [props.sprint, projectId, params.sprintId])\n\n  useEffect(() => {\n    if (sprint) {\n      setPageTitleOptions(<SprintOptions sprint={sprint} />)\n    }\n\n    return () => setPageTitleOptions(<div />)\n  }, [setPageTitleOptions, sprint])\n\n  if (booting) {\n    return <LoadingContent />\n  }\n\n  const nowDate = new Date()\n  const toDate = parseISO(sprint.toDate + ' 23:59:59')\n  const expired = toDate < nowDate\n\n  return (\n    <React.Fragment>\n      {expired && (\n        <div className=\"alert alert-warning\">\n          This sprint has expired,\n          &nbsp;\n          <Link to={`/dashboard/projects/${projectId}/sprints/create`}>\n            Create a new sprint\n          </Link>\n        </div>\n      )}\n      <BoardPage board={board} />\n    </React.Fragment>\n  )\n}\n\nfunction SprintOptions ({ sprint }) {\n  const history = useHistory()\n  const projectId = useProjectId()\n  const [listModal, setListModal] = useState(false)\n\n  const toggleListModal = () => setListModal(!listModal)\n\n  return (\n    <React.Fragment>\n      <SprintDetails>\n        ({sprint.fromDate} to {sprint.toDate})\n      </SprintDetails>\n      &nbsp;\n      <SprintActionButton\n        className=\"btn btn-primary btn-round btn-xs\"\n        onClick={() => history.push(`/dashboard/projects/${projectId}/sprints/${sprint.id}/edit`)}>\n        <FontAwesomeIcon icon={faPen} />\n      </SprintActionButton>\n      &nbsp;\n      <SprintActionButton\n        className=\"btn btn-info btn-round btn-xs\"\n        onClick={toggleListModal}>\n        <FontAwesomeIcon icon={faList} />\n      </SprintActionButton>\n\n      {listModal && (\n        <SprintListModal\n          isOpen={listModal}\n          toggle={toggleListModal} />\n      )}\n    </React.Fragment>\n  )\n}\n\nconst SprintDetails = styled.span`\n  font-weight: normal;\n  font-size: 0.7em;\n`\n\nconst SprintActionButton = styled.button`\n  margin: 0 !important;\n  padding: 10px !important;\n  border-radius: 20px !important;\n`\n"],"sourceRoot":""}