{"version":3,"sources":["modules/dashboard/users/components/avatar/index.jsx","modules/dashboard/users/components/my-profile-page/index.jsx"],"names":["Avatar","props","useState","user","loading","setLoading","setUser","size","parseInt","useEffect","current","then","Wrapper","email","className","styled","span","MyProfilePage","firstName","setFirstName","lastName","setLastName","setEmail","password","setPassword","passwordConfirm","setPasswordConfirm","errorMessage","setErrorMessage","successMessage","setSuccessMessage","setPageTitle","useContext","PageContext","md","CardWithoutOverflow","UserCover","href","target","rel","tag","onSubmit","ev","a","async","preventDefault","Error","data","updateCurrent","console","error","message","value","onChange","type","color","disabled","div"],"mappings":"oXAKe,SAASA,EAAQC,GAAQ,IAAD,EACPC,oBAAUD,EAAME,MADT,mBAC9BC,EAD8B,KACrBC,EADqB,OAEbH,mBAASD,EAAME,MAFF,mBAE9BA,EAF8B,KAExBG,EAFwB,KAG/BC,EAAON,EAAMM,KAAOC,SAASP,EAAMM,MAAQ,IAWjD,OATAE,qBAAU,YACHN,GAAQC,GACXM,cAAUC,MAAK,SAACR,GACdE,GAAW,GACXC,EAAQH,QAGX,CAACC,EAASD,IAERA,EAKH,kBAACS,EAAD,CAASL,KAAMA,GACb,kBAAC,IAAD,CAAUM,MAAOV,EAAKU,MAAON,KAAMA,EAAMO,UAAU,wBAL9C,+BAUX,IAAMF,E,OAAUG,EAAOC,KAAV,KAEA,SAAAf,GAAK,OAAIA,EAAMM,S,mjBCbb,SAASU,IAAkB,IAAD,EACff,mBAAS,MADM,mBAChCC,EADgC,KAC1BG,EAD0B,OAELJ,mBAAS,IAFJ,mBAEhCgB,EAFgC,KAErBC,EAFqB,OAGPjB,mBAAS,IAHF,mBAGhCkB,EAHgC,KAGtBC,EAHsB,OAIbnB,mBAAS,IAJI,mBAIhCW,EAJgC,KAIzBS,EAJyB,OAKPpB,mBAAS,IALF,mBAKhCqB,EALgC,KAKtBC,EALsB,OAMOtB,mBAAS,IANhB,mBAMhCuB,EANgC,KAMfC,EANe,OAOCxB,mBAAS,MAPV,mBAOhCyB,EAPgC,KAOlBC,EAPkB,OAQK1B,mBAAS,MARd,mBAQhC2B,EARgC,KAQhBC,EARgB,OAST5B,oBAAS,GATA,mBAShCE,GATgC,KASvBC,GATuB,KAuBvC,IAXA0B,EAFyBC,qBAAWC,KAA5BF,cAEK,cAEbtB,qBAAU,WACRC,cAAUC,MAAK,SAACR,GACdG,EAAQH,GACRgB,EAAahB,EAAKe,WAClBG,EAAYlB,EAAKiB,UACjBE,EAASnB,EAAKU,YAEf,KAEEV,EACH,OAAO,kBAAC,IAAD,MAmCT,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAK+B,GAAG,KACN,kBAACC,EAAD,CAAqBrB,UAAU,kBAC7B,yBAAKA,UAAU,SACb,kBAACsB,EAAD,OAEF,kBAAC,IAAD,KACE,yBAAKtB,UAAU,UACb,kBAAC,IAAD,CAAQX,KAAMA,IACd,wBAAIW,UAAU,SAASX,EAAKe,UAAY,IAAMf,EAAKiB,UACnD,uBAAGN,UAAU,eACVX,EAAKU,OAER,2BACE,uBAAGwB,KAAK,uBAAuBC,OAAO,SAASC,IAAI,uBAAnD,+BAMV,kBAAC,IAAD,CAAKL,GAAG,KACN,kBAAC,IAAD,CAAMpB,UAAU,aACd,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAW0B,IAAI,MAAf,iBAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMC,SA3DhB,SAA8BC,GAA9B,eAAAC,EAAAC,OAAA,mDACEF,EAAGG,iBACHjB,EAAgB,MAChBE,EAAkB,MAClBzB,IAAW,GAJb,UAOQkB,GAAYE,IAAoBF,EAPxC,sBAQY,IAAIuB,MAAM,iCARtB,cAWUC,EAAO,CACX7B,YACAE,WACAP,SAGEU,IACFwB,EAAKxB,SAAWA,GAlBtB,YAAAoB,EAAA,MAqBUK,YAAcD,IArBxB,QAuBIjB,EAAkB,gCAvBtB,kDAyBImB,QAAQC,MAAR,MACAtB,EAAgB,KAAEuB,SA1BtB,yBA4BI9C,IAAW,GA5Bf,8EA4DY,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAK6B,GAAG,KACN,kBAAC,IAAD,KACE,6CACA,kBAAC,IAAD,CAAOkB,MAAOlC,EAAWmC,SAAU,SAACX,GAAD,OAAQvB,EAAauB,EAAGJ,OAAOc,YAGtE,kBAAC,IAAD,CAAKlB,GAAG,KACN,kBAAC,IAAD,KACE,4CACA,kBAAC,IAAD,CAAOkB,MAAOhC,EAAUiC,SAAU,SAACX,GAAD,OAAQrB,EAAYqB,EAAGJ,OAAOc,aAItE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKlB,GAAG,MACN,kBAAC,IAAD,KACE,wCACA,kBAAC,IAAD,CAAOkB,MAAOvC,EAAOwC,SAAU,SAACX,GAAD,OAAQpB,EAASoB,EAAGJ,OAAOc,aAIhE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKlB,GAAG,KACN,kBAAC,IAAD,KACE,+CACA,kBAAC,IAAD,CAAOoB,KAAK,WAAWF,MAAO7B,EAAU8B,SAAU,SAACX,GAAD,OAAQlB,EAAYkB,EAAGJ,OAAOc,YAGpF,kBAAC,IAAD,CAAKlB,GAAG,KACN,kBAAC,IAAD,KACE,uDACA,kBAAC,IAAD,CAAOoB,KAAK,WAAWF,MAAO3B,EAAiB4B,SAAU,SAACX,GAAD,OAAQhB,EAAmBgB,EAAGJ,OAAOc,aAInGzB,GACC,yBAAKb,UAAU,sBACZa,GAGJE,GACC,yBAAKf,UAAU,uBACZe,GAGL,kBAAC,IAAD,KACE,yBAAKf,UAAU,0BACb,kBAAC,IAAD,CACEA,UAAU,YACVyC,MAAM,UACND,KAAK,SACLE,SAAUpD,IAETA,GAAU,cAAgB,yBAY/C,IAAMgC,EAAYrB,IAAO0C,IAAV,KAMTtB,EAAsBpB,IAAO0C,IAAV","file":"static/js/16.f84e16dc.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Gravatar from 'react-gravatar'\nimport { current } from '../../services/user-service'\nimport styled from 'styled-components'\n\nexport default function Avatar (props) {\n  const [loading, setLoading] = useState(!props.user)\n  const [user, setUser] = useState(props.user)\n  const size = props.size ? parseInt(props.size) : 150\n\n  useEffect(() => {\n    if (!user && loading) {\n      current().then((user) => {\n        setLoading(false)\n        setUser(user)\n      })\n    }\n  }, [loading, user])\n\n  if (!user) {\n    return <span></span>\n  }\n\n  return (\n    <Wrapper size={size}>\n      <Gravatar email={user.email} size={size} className=\"avatar border-gray\" />\n    </Wrapper>\n  )\n}\n\nconst Wrapper = styled.span`\n  .avatar {\n    width: ${props => props.size} !important;\n    height: unset !important;\n    max-width: unset;\n  }\n`\n","import React, { useState, useContext, useEffect } from 'react'\nimport PageContext from '../../../theme/components/page/page-context'\nimport { current, updateCurrent } from '../../services/user-service'\nimport LoadingContent from '../../../theme/components/loading-content'\nimport {\n  Row,\n  Col,\n  Form,\n  FormGroup,\n  Button,\n  Input,\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody\n} from 'reactstrap'\nimport styled from 'styled-components'\nimport Avatar from '../avatar'\n\nexport default function MyProfilePage () {\n  const [user, setUser] = useState(null)\n  const [firstName, setFirstName] = useState('')\n  const [lastName, setLastName] = useState('')\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [passwordConfirm, setPasswordConfirm] = useState('')\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [successMessage, setSuccessMessage] = useState(null)\n  const [loading, setLoading] = useState(false)\n  const { setPageTitle } = useContext(PageContext)\n\n  setPageTitle('My profile')\n\n  useEffect(() => {\n    current().then((user) => {\n      setUser(user)\n      setFirstName(user.firstName)\n      setLastName(user.lastName)\n      setEmail(user.email)\n    })\n  }, [])\n\n  if (!user) {\n    return <LoadingContent />\n  }\n\n  async function updateProfile (ev) {\n    ev.preventDefault()\n    setErrorMessage(null)\n    setSuccessMessage(null)\n    setLoading(true)\n\n    try {\n      if (password && passwordConfirm !== password) {\n        throw new Error('Invalid, confirm new password')\n      }\n\n      const data = {\n        firstName,\n        lastName,\n        email\n      }\n\n      if (password) {\n        data.password = password\n      }\n\n      await updateCurrent(data)\n\n      setSuccessMessage('Profile updated with success')\n    } catch (e) {\n      console.error(e)\n      setErrorMessage(e.message)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <Row>\n      <Col md=\"4\">\n        <CardWithoutOverflow className=\"card card-user\">\n          <div className=\"image\">\n            <UserCover />\n          </div>\n          <CardBody>\n            <div className=\"author\">\n              <Avatar user={user} />\n              <h5 className=\"title\">{user.firstName + ' ' + user.lastName}</h5>\n              <p className=\"description\">\n                {user.email}\n              </p>\n              <p>\n                <a href=\"https://gravatar.com\" target=\"_blank\" rel=\"noopener noreferrer\">Update profile picture</a>\n              </p>\n            </div>\n          </CardBody>\n        </CardWithoutOverflow>\n      </Col>\n      <Col md=\"8\">\n        <Card className=\"card-user\">\n          <CardHeader>\n            <CardTitle tag=\"h5\">Edit profile</CardTitle>\n          </CardHeader>\n          <CardBody>\n            <Form onSubmit={updateProfile}>\n              <Row>\n                <Col md=\"6\">\n                  <FormGroup>\n                    <label>First name</label>\n                    <Input value={firstName} onChange={(ev) => setFirstName(ev.target.value)} />\n                  </FormGroup>\n                </Col>\n                <Col md=\"6\">\n                  <FormGroup>\n                    <label>Last name</label>\n                    <Input value={lastName} onChange={(ev) => setLastName(ev.target.value)} />\n                  </FormGroup>\n                </Col>\n              </Row>\n              <Row>\n                <Col md=\"12\">\n                  <FormGroup>\n                    <label>Email</label>\n                    <Input value={email} onChange={(ev) => setEmail(ev.target.value)} />\n                  </FormGroup>\n                </Col>\n              </Row>\n              <Row>\n                <Col md=\"6\">\n                  <FormGroup>\n                    <label>New password</label>\n                    <Input type=\"password\" value={password} onChange={(ev) => setPassword(ev.target.value)} />\n                  </FormGroup>\n                </Col>\n                <Col md=\"6\">\n                  <FormGroup>\n                    <label>Confirm new password</label>\n                    <Input type=\"password\" value={passwordConfirm} onChange={(ev) => setPasswordConfirm(ev.target.value)} />\n                  </FormGroup>\n                </Col>\n              </Row>\n              {errorMessage && (\n                <div className=\"alert alert-danger\">\n                  {errorMessage}\n                </div>\n              )}\n              {successMessage && (\n                <div className=\"alert alert-success\">\n                  {successMessage}\n                </div>\n              )}\n              <Row>\n                <div className=\"update ml-auto mr-auto\">\n                  <Button\n                    className=\"btn-round\"\n                    color=\"primary\"\n                    type=\"submit\"\n                    disabled={loading}\n                  >\n                    {loading ? 'Updating...' : 'Update profile'}\n                  </Button>\n                </div>\n              </Row>\n            </Form>\n          </CardBody>\n        </Card>\n      </Col>\n    </Row>\n  )\n}\n\nconst UserCover = styled.div`\n  background: #3d2ab2;\n  background: linear-gradient(145deg, #3d2ab2 0%, #5c39ba 45%, #b764d3 100%);\n  height: 130px;\n`\n\nconst CardWithoutOverflow = styled.div`\n  overflow: hidden !important;\n`\n"],"sourceRoot":""}