{"version":3,"sources":["modules/dashboard/users/components/avatar/index.jsx","modules/dashboard/boards/services/column-service.js","modules/dashboard/theme/components/editable-text/index.jsx","modules/dashboard/theme/components/text-area/index.jsx","modules/dashboard/theme/components/markdown/index.jsx","modules/dashboard/tasks/components/task-description/index.jsx","modules/dashboard/tasks/services/check-item-service.js","modules/dashboard/theme/components/checkbox/index.jsx","modules/dashboard/tasks/components/task-checklist/index.jsx","modules/dashboard/tasks/services/comment-service.js","modules/dashboard/tasks/services/task-activity-service.js","modules/core/services/date-service.js","modules/dashboard/tasks/components/task-activity/index.jsx","modules/dashboard/tasks/components/task-modal/index.jsx","modules/dashboard/boards/components/board-page/board-context.js","modules/dashboard/boards/components/column-form-modal/index.jsx","modules/dashboard/theme/components/confirm-modal/index.jsx","modules/dashboard/tasks/components/task-add-input/index.jsx","modules/dashboard/tasks/components/task-card/index.jsx","modules/dashboard/boards/components/column/index.jsx","modules/dashboard/boards/components/board-page/index.jsx"],"names":["Avatar","props","useState","user","loading","setLoading","setUser","size","parseInt","useEffect","current","then","Wrapper","email","className","styled","span","list","projectId","boardId","a","async","request","method","url","response","deserialize","data","create","column","serialize","Error","errors","detail","edit","id","destroy","EditableText","mode","setMode","text","setText","textLabelRef","useRef","textInputRef","change","useCallback","debounce","onChange","TextLabel","ref","onClick","sourceNode","targetNode","computedStyle","window","getComputedStyle","Array","from","forEach","key","style","setProperty","getPropertyValue","getPropertyPriority","copyNodeStyle","focus","display","icon","faPen","type","value","e","target","onKeyPress","event","onBlur","div","TextArea","setValue","textAreaRef","innerRef","height","newHeight","scrollHeight","handleOnChange","onFocus","Markdown","source","TaskDescription","task","description","setDescription","editing","setEditing","useParams","console","log","handleStartEdit","handleEditing","handleFinishEdit","board","faAlignJustify","taskId","checkItem","Checkbox","checked","setChecked","handleClick","newChecked","faCheckCircle","faCircle","TaskChecklistContext","createContext","TaskChecklist","checkItems","setCheckItems","nextOrder","Math","max","map","c","order","container","useContext","Container","reloadCheckItems","reloadCheckItemsDebounce","removeListener","ws","onPattern","moveItem","dragIndex","hoverIndex","item","update","$splice","updateItemOrders","orderUpdates","index","push","length","columnOrderUpdates","promises","Promise","all","doUpdate","Provider","faTasks","CheckItem","CheckItemAddInput","errorMessage","setErrorMessage","handleSubmit","preventDefault","message","onSubmit","InputGroup","Input","InputGroupAddon","addonType","Button","color","disabled","useDrop","accept","ItemTypes","CHECK_ITEM","hover","monitor","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","hoverClientY","getClientOffset","y","drop","dropRef","useDrag","collect","opacity","isDragging","dragRef","CheckItemWrapper","Fragment","faTimes","comment","queryString","queryStringText","serializeQueryString","append","formatLocalTime","date","pattern","Date","parseISO","localTimeZone","Intl","DateTimeFormat","resolvedOptions","timeZone","utcToZonedTime","format","TaskActivity","setComment","focused","setFocused","saving","setSaving","showSave","comments","histories","setActivities","loadActivity","listComment","listActivity","include","reloadActivity","removeCommentListener","removeHistoryListener","activities","useMemo","activityType","history","sortBy","createdAt","reverse","faList","createComment","activity","Activity","HistoryActivity","CommentActivity","userId","DashboardContext","ActivityWrapper","editComment","destroyComment","historyDescription","userName","firstName","updated","storyPoints","name","before","after","makeHistoryDescription","Task","booting","setBooting","setTask","deleting","setDeleting","moving","setMoving","params","refreshTask","get","status","join","leave","removeTaskListener","handleChangeName","handleChangeStoryPoints","number","Modal","isOpen","toggle","ModalHeader","ModalBody","OptionField","ev","ActionColumn","moveToBacklog","moveToSprint","ColumnFormModal","columnId","setName","error","setError","setColumn","BoardContext","ModalFooter","nextColumnOrder","onSave","ConfirmModal","class","onConfirm","TaskAddInput","lastTaskOrder","TaskCard","moveTask","updateTaskOrders","location","useLocation","useHistory","taskUrl","test","pathname","match","openTask","TASK","dragColumnId","hoverColumnId","Card","Column","tasks","columnForm","setColumnForm","deleteModal","setDeleteModal","sumStoryPoints","reduce","acc","moveColumn","updateColumnOrders","refreshColumns","toggleColumnForm","toggleDeleteModal","COLUMN","hoverMiddleX","right","left","hoverClientX","x","previewRef","columnDivClasses","ColumnDiv","ColumnTitle","Options","faEdit","faTrash","ColumnBody","listTasksOpts","fields","BoardPage","useProjectId","bootState","setBootState","columns","setColumns","setTasks","tasksByColumn","setTasksByColumn","toggleTaskModal","newPath","replace","listColumns","refreshTasks","listTasks","removeColumnListener","result","filterTasks","dragColumn","editColumn","updates","editTask","boot","lastColumnOrder","AddButton","path","filter","button"],"mappings":"mXAKe,SAASA,EAAQC,GAAQ,IAAD,EACPC,oBAAUD,EAAME,MADT,mBAC9BC,EAD8B,KACrBC,EADqB,OAEbH,mBAASD,EAAME,MAFF,mBAE9BA,EAF8B,KAExBG,EAFwB,KAG/BC,EAAON,EAAMM,KAAOC,SAASP,EAAMM,MAAQ,IAWjD,OATAE,qBAAU,YACHN,GAAQC,GACXM,cAAUC,MAAK,SAACR,GACdE,GAAW,GACXC,EAAQH,QAGX,CAACC,EAASD,IAERA,EAKH,kBAACS,EAAD,CAASL,KAAMA,GACb,kBAAC,IAAD,CAAUM,MAAOV,EAAKU,MAAON,KAAMA,EAAMO,UAAU,wBAL9C,+BAUX,IAAMF,E,OAAUG,EAAOC,KAAV,KAEA,SAAAf,GAAK,OAAIA,EAAMM,S,iIC7BrB,SAAeU,EAAMC,EAAWC,GAAhC,eAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACkBE,YAAQ,CAC7BC,OAAQ,MACRC,IAAI,uBAAD,OAAyBN,EAAzB,mBAA6CC,EAA7C,eAHA,cACCM,EADD,yBAMEC,YAAYD,EAASE,OANvB,qCAkBA,SAAeC,EAAQV,EAAWC,EAASU,GAA3C,eAAAT,EAAAC,OAAA,2EAAAD,EAAA,MAIcE,YAAQ,CACvBC,OAAQ,OACRC,IAAI,uBAAD,OAAyBN,EAAzB,mBAA6CC,EAA7C,YACHQ,KAAMG,YAAUD,EAAQ,cAPvB,OAIHJ,EAJG,4DAUG,IAAIM,MAAM,KAAEN,SAASE,KAAKK,OAAO,GAAGC,QAVvC,gCAaEP,YAAYD,EAASE,OAbvB,wDAgBA,SAAeO,EAAMhB,EAAWC,EAASgB,EAAIN,GAA7C,eAAAT,EAAAC,OAAA,2EAAAD,EAAA,MAIcE,YAAQ,CACvBC,OAAQ,QACRC,IAAI,uBAAD,OAAyBN,EAAzB,mBAA6CC,EAA7C,oBAAgEgB,GACnER,KAAMG,YAAUD,EAAQ,cAPvB,OAIHJ,EAJG,4DAUG,IAAIM,MAAM,KAAEN,SAASE,KAAKK,OAAO,GAAGC,QAVvC,gCAaEP,YAAYD,EAASE,OAbvB,wDAgBA,SAAeS,EAASlB,EAAWC,EAASgB,GAA5C,SAAAf,EAAAC,OAAA,2EAAAD,EAAA,MAEGE,YAAQ,CACZC,OAAQ,SACRC,IAAI,uBAAD,OAAyBN,EAAzB,mBAA6CC,EAA7C,oBAAgEgB,MAJlE,4DAOG,IAAIJ,MAAM,KAAEN,SAASE,KAAKK,OAAO,GAAGC,QAPvC,uD,gYC/CQ,SAASI,EAAcpC,GAAQ,IAAD,EACnBC,mBAAS,QADU,mBACpCoC,EADoC,KAC9BC,EAD8B,OAEnBrC,mBAASD,EAAMuC,MAFI,mBAEpCA,EAFoC,KAE9BC,EAF8B,KAGrCC,EAAeC,mBACfC,EAAeD,mBAErBlC,qBAAU,WACRgC,EAAQxC,EAAMuC,QACb,CAACvC,EAAMuC,OAsCV,IAAMK,EAASC,sBACbC,KAAS,SAACP,GACRvC,EAAM+C,SAASR,KACd,KACH,CAACvC,EAAM+C,WAGT,OACE,kBAACpC,EAAD,CAASE,UAAS,eAAUwB,IAC1B,kBAACW,EAAD,CACEC,IAAKR,EACLS,QA/CN,WACe,SAATb,GAeN,SAAwBc,EAAYC,GAClC,IAAMC,EAAgBC,OAAOC,iBAAiBJ,GAC9CK,MAAMC,KAAKJ,GAAeK,SAAQ,SAAAC,GAAG,OAAIP,EAAWQ,MAAMC,YAAYF,EAAKN,EAAcS,iBAAiBH,GAAMN,EAAcU,oBAAoBJ,OALlJK,CAAcvB,EAAahC,QAASkC,EAAalC,SARjD6B,EAAiB,SAATD,EAAkB,OAAS,QAEtB,SAATA,GACFM,EAAalC,QAAQwD,SAwCnBL,MAAO,CAAEM,QAAkB,SAAT7B,EAAkB,QAAU,SAE7CE,EACD,0BAAM1B,UAAU,eAAhB,OAEE,kBAAC,IAAD,CAAiBsD,KAAMC,QAG3B,2BACEnB,IAAKN,EACL0B,KAAK,OACLC,MAAO/B,EACPQ,SAAU,SAACwB,GAAD,OAAO/B,EAAQ+B,EAAEC,OAAOF,QAClCG,WAxCN,SAAqBC,GACD,UAAdA,EAAMf,MACRrB,EAAQ,QACRM,EAAOL,KAsCLoC,OAlCN,SAAiBD,GACfpC,EAAQ,QAEJC,IAASvC,EAAMuC,MACjBK,EAAOL,IA+BLqB,MAAO,CAAEM,QAAkB,SAAT7B,EAAkB,QAAU,WAMtD,IAAMW,EAAYlC,IAAO8D,IAAV,KAYTjE,EAAUG,IAAO8D,IAAV,K,kMC9FE,SAASC,EAAU7E,GAAQ,IAAD,EACbC,mBAASD,EAAMsE,OADF,mBAChCA,EADgC,KACzBQ,EADyB,KAEnCC,EAAcrC,mBAElBlC,qBAAU,WACRsE,EAAS9E,EAAMsE,SACd,CAACtE,EAAMsE,QAENtE,EAAMgF,WACRD,EAAc/E,EAAMgF,UAGtBxE,qBAAU,WACRuE,EAAYtE,QAAQmD,MAAMqB,OAAS,MAEnC,IAAIC,EAAYH,EAAYtE,QAAQ0E,aAAe,EAE/CD,EAAY,KACdA,EAAY,IAGdH,EAAYtE,QAAQmD,MAAMqB,OAASC,EAAY,OAC9C,CAACZ,IAEJ,IAAMc,EAAiBvC,uBAAY,SAACyB,GAClCtE,EAAM+C,SAASuB,GACfQ,EAASR,KACR,CAACtE,IAEJ,OACE,kBAAC,EAAD,KACE,8BACEiD,IAAK8B,EACLlE,UAAU,eACVkC,SAAU,SAACwB,GAAD,OAAOa,EAAeb,EAAEC,OAAOF,QACzCA,MAAOA,EACPe,QAASrF,EAAMqF,QACfV,OAAQ3E,EAAM2E,UAMtB,IAAMhE,EAAUG,IAAO8D,IAAV,K,qUC1CE,SAASU,EAAUtF,GAChC,OACE,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAeuF,OAAQvF,EAAMsE,SAKnC,IAAM3D,EAAUG,IAAO8D,IAAV,KCJE,SAASY,EAAT,GAAqC,IAATC,EAAQ,EAARA,KAAQ,EACXxF,mBAASwF,EAAKC,aADH,mBAC1CA,EAD0C,KAC7BC,EAD6B,OAEnB1F,oBAAS,GAFU,mBAE1C2F,EAF0C,KAEjCC,EAFiC,KAGzC5E,EAAc6E,cAAd7E,UACF8D,EAAcrC,mBAEpBlC,qBAAU,WACRmF,EAAeF,EAAKC,eACnB,CAACD,EAAKC,cAETlF,qBAAU,WACJoF,IACFG,QAAQC,IAAI,SACZjB,EAAYtE,QAAQwD,WAErB,CAAC2B,IAEJ,IAAMK,EAAkBpD,uBAAY,WAClCgD,GAAW,KACV,IAEGK,EAAgBrD,uBAAY,SAACyB,GACjCqB,EAAerB,KACd,IAEG6B,EAAmBtD,uBAAY,SAACyB,GACpCuB,GAAW,GAEX5D,YAAKhB,EAAWwE,EAAKW,MAAMlE,GAAIuD,EAAKvD,GAAI,CACtCwD,kBAED,CAACA,EAAazE,EAAWwE,EAAKW,MAAMlE,GAAIuD,EAAKvD,KAEhD,OACE,6BACE,wBAAIrB,UAAU,QACZ,kBAAC,IAAD,CAAiBsD,KAAMkC,MADzB,qBAGIT,GAAW,4BAAQ/E,UAAU,mCAAmCqC,QAAS+C,GAA9D,SAEf,yBAAKrC,MAAO,CAAEM,QAAS0B,EAAU,QAAU,SACzC,kBAACf,EAAD,CAAUG,SAAUD,EAAahC,SAAU,SAACuB,GAAD,OAAW4B,EAAc5B,IAAQA,MAAOoB,IACnF,4BAAQ7E,UAAU,yBAAyBqC,QAASiD,GAApD,SAEF,yBAAKvC,MAAO,CAAEM,QAAS0B,EAAU,OAAS,UACxC,kBAACN,EAAD,CAAUhB,MAAOoB,M,iDClDlB,SAAe1E,EAAMC,EAAWC,EAASoF,GAAzC,eAAAnF,EAAAC,OAAA,kEAAAD,EAAA,MACkBE,YAAQ,CAC7BC,OAAQ,MACRC,IAAI,uBAAD,OAAyBN,EAAzB,mBAA6CC,EAA7C,kBAA8DoF,EAA9D,mBAHA,cACC9E,EADD,yBAMEC,YAAYD,EAASE,OANvB,qCASA,SAAeC,EAAQV,EAAWC,EAASoF,EAAQC,GAAnD,eAAApF,EAAAC,OAAA,2EAAAD,EAAA,MAIcE,YAAQ,CACvBC,OAAQ,OACRC,IAAI,uBAAD,OAAyBN,EAAzB,mBAA6CC,EAA7C,kBAA8DoF,EAA9D,gBACH5E,KAAMG,YAAU0E,EAAW,kBAP1B,OAIH/E,EAJG,4DAUG,IAAIM,MAAM,KAAEN,SAASE,KAAKK,OAAO,GAAGC,QAVvC,gCAaEP,YAAYD,EAASE,OAbvB,wDAgBA,SAAeO,EAAMhB,EAAWC,EAASoF,EAAQpE,EAAIqE,GAArD,eAAApF,EAAAC,OAAA,2EAAAD,EAAA,MAIcE,YAAQ,CACvBC,OAAQ,QACRC,IAAI,uBAAD,OAAyBN,EAAzB,mBAA6CC,EAA7C,kBAA8DoF,EAA9D,wBAAoFpE,GACvFR,KAAMG,YAAU0E,EAAW,YAP1B,OAIH/E,EAJG,4DAUG,IAAIM,MAAM,KAAEN,SAASE,KAAKK,OAAO,GAAGC,QAVvC,gCAaEP,YAAYD,EAASE,OAbvB,wD,8PCtBQ,SAAS8E,GAAUxG,GAAQ,IAAD,EACTC,mBAASD,EAAMyG,SADN,mBAChCA,EADgC,KACvBC,EADuB,KAOvC,SAASC,IACP,IAAMC,GAAcH,EACpBC,EAAWE,GAEP5G,EAAM+C,UACR/C,EAAM+C,SAAS6D,GAInB,OAbApG,qBAAU,WACRkG,EAAW1G,EAAMyG,WAChB,CAACzG,EAAMyG,UAWNA,EAEA,kBAAC,GAAD,CAASvD,QAASyD,GAChB,kBAAC,IAAD,CAAiB9F,UAAU,SAASsD,KAAM0C,OAK5C,kBAAC,GAAD,CAAS3D,QAASyD,GAChB,kBAAC,IAAD,CAAiB9F,UAAU,WAAWsD,KAAM2C,QAMpD,IAAMnG,GAAUG,IAAOC,KAAV,M,sNCvBb,IAAMgG,GAAuBC,wBAAc,MAE5B,SAASC,GAAT,GAAmC,IAATxB,EAAQ,EAARA,KAAQ,EACXxF,mBAAS,IADE,mBACxCiH,EADwC,KAC5BC,EAD4B,KAEvClG,EAAc6E,cAAd7E,UACFmG,EAAYC,KAAKC,IAAL,MAAAD,KAAI,CAAK,GAAL,mBAAWH,EAAWK,KAAI,SAACC,GAAD,OAAOA,EAAEC,MAAQ,QAC3DC,EAAYC,qBAAWC,KAEvBC,EAAmBhF,uBAAY,oBAAA1B,EAAAC,OAAA,4DACnC+F,EADmC,WAAAhG,EAAA,MACfH,EAAKC,EAAWwE,EAAKW,MAAMlE,GAAIuD,EAAKvD,KADrB,yEAElC,CAACjB,EAAWwE,EAAKW,MAAMlE,GAAIuD,EAAKvD,KAE7B4F,EAA2BjF,sBAAYC,IAAS+E,EAAkB,KAAM,CAACA,IAE/ErH,qBAAU,WACRqH,MACC,CAACA,IAEJrH,qBAAU,WACR,IAAMuH,EAAiBL,EAAUM,GAAGC,UAAb,eAA+BxC,EAAKvD,GAApC,kBAAuD,WAC5E4F,OAGF,OAAO,WACLC,OAED,CAACL,EAAUM,GAAIH,EAAkBC,EAA0BrC,EAAKvD,KAEnE,IAAMgG,EAAWrF,uBAAY,SAACsF,EAAWC,GACvC,IAAMC,EAAOnB,EAAWiB,GAExBhB,EACEmB,KAAOpB,EAAY,CACjBqB,QAAS,CACP,CAACJ,EAAW,GACZ,CAACC,EAAY,EAAGC,SAIrB,CAACnB,IAEEsB,EAAmB3F,sBACvBC,KAAS,WACP,IAAM2F,EAAe,GAErB,IAAK,IAAMC,KAASxB,EAAY,CAC9B,IAAMmB,EAAOnB,EAAWwB,GAClBjB,EAAQlH,SAASmI,GAEnBL,EAAKZ,QAAUA,GACjBgB,EAAaE,KAAK,CAChBzG,GAAImG,EAAKnG,GACTuF,UAiBFgB,EAAaG,OAAS,GAZ1B,SAAyBC,GAAzB,oBAAA1H,EAAAC,OAAA,gDAGE,IAFM0H,EAAW,GADnB,4BAGE,EAAqBD,EAArB,+CAAWP,EAA8B,QACvCQ,EAASH,KAAK1G,EAAKhB,EAAWwE,EAAKW,MAAMlE,GAAIuD,EAAKvD,GAAIoG,EAAOpG,GAAI,CAC/DuF,MAAOa,EAAOb,SALpB,0PAAAtG,EAAA,MASQ4H,QAAQC,IAAIF,IATpB,0EAaEG,CAASR,KAEV,KACH,CAAChD,EAAMyB,IAGT,OACE,kBAACH,GAAqBmC,SAAtB,CAA+B5E,MAAO,CACpC4D,WACAM,qBAEA,wBAAI3H,UAAU,QAAO,kBAAC,IAAD,CAAiBsD,KAAMgF,MAA5C,cACA,6BACGjC,EAAWK,KAAI,SAAChB,EAAWmC,GAAZ,OACd,kBAACU,GAAD,CAAWzF,IAAK4C,EAAUrE,GAAIuD,KAAMA,EAAMiD,MAAOA,EAAOnC,UAAWA,QAGvE,kBAAC8C,GAAD,CAAmB5D,KAAMA,EAAM2B,UAAWA,KAKhD,SAASiC,GAAT,GAAkD,IAApB5D,EAAmB,EAAnBA,KAAM2B,EAAa,EAAbA,UAAa,EACvBnH,mBAAS,IADc,mBACxCsC,EADwC,KAClCC,EADkC,OAEjBvC,oBAAS,GAFQ,mBAExCE,EAFwC,KAE/BC,EAF+B,OAGPH,mBAAS,MAHF,mBAGxCqJ,EAHwC,KAG1BC,EAH0B,KAIvCtI,EAAc6E,cAAd7E,UAEFuI,EAAe3G,uBAAY,SAAO0B,GAAP,SAAApD,EAAAC,OAAA,uDAC/BmD,EAAEkF,iBACFrJ,GAAW,GAFoB,oBAAAe,EAAA,MAKvBQ,EAAOV,EAAWwE,EAAKW,MAAMlE,GAAIuD,EAAKvD,GAAI,CAC9CK,OACAkF,MAAOL,EACPX,SAAS,KARkB,OAW7BjE,EAAQ,IAXqB,gDAa7B+G,EAAgB,KAAEG,SAbW,yBAe7BtJ,GAAW,GAfkB,6EAiB9B,CAACgH,EAAWnG,EAAWwE,EAAKW,MAAOX,EAAKvD,GAAIK,IAE/C,OACE,0BAAMoH,SAAUH,GACd,kBAACI,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOvF,MAAO/B,EAAMQ,SAAU,SAACwB,GAAD,OAAO/B,EAAQ+B,EAAEC,OAAOF,UACtD,kBAACwF,EAAA,EAAD,CAAiBC,UAAU,UACzB,kBAACC,EAAA,EAAD,CAAQC,MAAM,UAAUC,SAAU/J,GAAWA,EAAU,OAAS,SAGnEmJ,GACC,yBAAKzI,UAAU,sBACZyI,IAOX,SAASF,GAAT,GAAiD,IAA3B3D,EAA0B,EAA1BA,KAAMc,EAAoB,EAApBA,UAAWmC,EAAS,EAATA,MAC7BzH,EAAc6E,cAAd7E,UADsC,EAEP0G,qBAAWZ,IAA1CmB,EAFsC,EAEtCA,SAAUM,EAF4B,EAE5BA,iBAF4B,EAGhBvI,oBAAS,GAHO,mBAGvC2F,EAHuC,KAG9BC,EAH8B,OAIN5F,mBAAS,MAJH,mBAIvCqJ,EAJuC,KAIzBC,EAJyB,OAKtBtJ,mBAASsG,EAAUhE,MALG,mBAKvCA,EALuC,KAKjCC,EALiC,OAMhBvC,oBAAS,GANO,mBAMvCE,EANuC,KAM9BC,EAN8B,KAQ9CI,qBAAU,WACRgC,EAAQ+D,EAAUhE,QACjB,CAACgE,EAAUhE,OAEd,IAAMU,EAAMP,iBAAO,MAZ2B,MA2C1ByH,YAAQ,CAC1BC,OAAQC,KAAUC,WAClBC,MAF0B,SAEnBlC,EAAMmC,GACX,GAAKvH,EAAIxC,QAAT,CAIA,IAAM0H,EAAYE,EAAKK,MACjBN,EAAaM,EAEnB,GAAIP,IAAcC,EAAlB,CAIA,IAAMqC,EAAoBxH,EAAIxC,QAAQiK,wBAChCC,GAAgBF,EAAkBG,OAASH,EAAkBI,KAAO,EAEpEC,EADeN,EAAQO,kBACKC,EAAIP,EAAkBI,IAEpD1C,EAAYC,GAAc0C,EAAeH,GAIzCxC,EAAYC,GAAc0C,EAAeH,IAI7CzC,EAASC,EAAWC,GAEpBC,EAAKK,MAAQN,MAEf6C,KA/B0B,WAgCxBzC,OAhCK0C,EA3CqC,sBA+EfC,YAAQ,CACrC9C,KAAK,eAAM9B,EAAP,CAAkBlC,KAAMgG,KAAUC,WAAY5B,UAClD0C,QAAS,SAAAZ,GAAO,MAAK,CACnBa,QAASb,EAAQc,aAAe,EAAI,MAlFM,mBA+ErCD,EA/EqC,KA+ErCA,QAST,OAFAE,EAtF8C,MAsFtCL,EAAQjI,IAGd,kBAACuI,GAAD,CAAkB5H,MAAO,CAAEyH,WAAWpI,IAAKA,GACxC2C,EACC,0BAAM+D,SAjEZ,SAA6BpF,GAA7B,SAAApD,EAAAC,OAAA,gDACEmD,EAAEkF,iBACFrJ,GAAW,GAEX,IACE6B,EAAKhB,EAAWwE,EAAKW,MAAMlE,GAAIuD,EAAKvD,GAAIqE,EAAUrE,GAAI,CACpDK,SAGFsD,GAAW,GACX,MAAOtB,GACPgF,EAAgBhF,EAAEmF,SAPpB,QASEtJ,GAAW,GAbf,uCAkEQ,kBAACwJ,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOvF,MAAO/B,EAAMQ,SAAU,SAACwB,GAAD,OAAO/B,EAAQ+B,EAAEC,OAAOF,UACtD,kBAACwF,EAAA,EAAD,CAAiBC,UAAU,UACzB,kBAACC,EAAA,EAAD,CAAQC,MAAM,UAAUC,SAAU/J,GAAWA,EAAU,OAAS,UAGnEmJ,GACC,yBAAKzI,UAAU,sBACZyI,IAKP,kBAAC,IAAMmC,SAAP,KACE,kBAACjF,GAAD,CAAUC,QAASF,EAAUE,QAAS1D,SA1F9C,SAAsB0D,GACpBxE,EAAKhB,EAAWwE,EAAKW,MAAMlE,GAAIuD,EAAKvD,GAAIqE,EAAUrE,GAAI,CACpDuE,eAuFE,OAGGF,EAAUhE,KACX,0BAAM1B,UAAU,cACd,kBAAC,IAAD,CAAiBA,UAAU,SAASsD,KAAMC,IAAOlB,QAhGrC,kBAAM2C,GAAYD,MA+FhC,OAGE,kBAAC,IAAD,CAAiB/E,UAAU,SAASsD,KAAMuH,IAASxI,QA1F7D,YF9HK,SAAwBjC,EAAWC,EAASoF,EAAQpE,GAApD,EAAAf,EAAAC,OAAA,kEAAAD,EAAA,MACCE,YAAQ,CACZC,OAAQ,SACRC,IAAI,uBAAD,OAAyBN,EAAzB,mBAA6CC,EAA7C,kBAA8DoF,EAA9D,wBAAoFpE,MAHpF,qCE+HHC,CAAQlB,EAAWwE,EAAKW,MAAMlE,GAAIuD,EAAKvD,GAAIqE,EAAUrE,UAiGzD,IAAMsJ,GAAmB1K,IAAO8D,IAAV,M,oBCzQf,SAAe5D,GAAMC,EAAWC,EAASoF,GAAzC,eAAAnF,EAAAC,OAAA,kEAAAD,EAAA,MACkBE,YAAQ,CAC7BC,OAAQ,MACRC,IAAI,uBAAD,OAAyBN,EAAzB,mBAA6CC,EAA7C,kBAA8DoF,EAA9D,gBAHA,cACC9E,EADD,yBAMEC,YAAYD,EAASE,OANvB,qCASA,SAAeC,GAAQV,EAAWC,EAASoF,EAAQqF,GAAnD,eAAAxK,EAAAC,OAAA,2EAAAD,EAAA,MAIcE,YAAQ,CACvBC,OAAQ,OACRC,IAAI,uBAAD,OAAyBN,EAAzB,mBAA6CC,EAA7C,kBAA8DoF,EAA9D,aACH5E,KAAMG,YAAU8J,EAAS,eAPxB,OAIHnK,EAJG,4DAUG,IAAIM,MAAM,KAAEN,SAASE,KAAKK,OAAO,GAAGC,QAVvC,gCAaEP,YAAYD,EAASE,OAbvB,wDAgBA,SAAeO,GAAMhB,EAAWC,EAASoF,EAAQpE,EAAIyJ,GAArD,eAAAxK,EAAAC,OAAA,2EAAAD,EAAA,MAIcE,YAAQ,CACvBC,OAAQ,QACRC,IAAI,uBAAD,OAAyBN,EAAzB,mBAA6CC,EAA7C,kBAA8DoF,EAA9D,qBAAiFpE,GACpFR,KAAMG,YAAU8J,EAAS,eAPxB,OAIHnK,EAJG,4DAUG,IAAIM,MAAM,KAAEN,SAASE,KAAKK,OAAO,GAAGC,QAVvC,gCAaEP,YAAYD,EAASE,OAbvB,wDCzBA,SAAeV,GAAMC,EAAWC,EAASoF,EAAQsF,GAAjD,mBAAAzK,EAAAC,OAAA,uDACCyK,EAAkBD,EAAcE,YAAqBF,GAAe,KACpEG,EAASF,EAAkB,IAAMA,EAAkB,GAFpD,WAAA1K,EAAA,MAIkBE,YAAQ,CAC7BC,OAAQ,MACRC,IAAK,8BAAuBN,EAAvB,mBAA2CC,EAA3C,kBAA4DoF,EAA5D,oBAAuFyF,KANzF,cAICvK,EAJD,yBASEC,YAAYD,EAASE,OATvB,qC,uDCAA,SAASsK,GAAiBC,GAA+C,IAAzCC,EAAwC,uDAA9B,6BAC/C,IAAKD,EACH,MAAO,GAGHA,aAAgBE,OACpBF,EAAOG,mBAASH,IAGlB,IAAMI,EAAgBC,KAAKC,iBAAiBC,kBAAkBC,SAI9D,OAFAR,EAAOS,aAAeT,EAAMI,GAErBM,aAAOV,EAAMC,G,wTCMP,SAASU,GAAT,GAAkC,IAATnH,EAAQ,EAARA,KAAQ,EAChBxF,mBAAS,IADO,mBACvC0L,EADuC,KAC9BkB,EAD8B,OAEhB5M,oBAAS,GAFO,mBAEvC6M,EAFuC,KAE9BC,EAF8B,OAGlB9M,oBAAS,GAHS,mBAGvC+M,EAHuC,KAG/BC,EAH+B,OAINhN,mBAAS,MAJH,mBAIvCqJ,EAJuC,KAIzBC,EAJyB,KAKtCtI,EAAc6E,cAAd7E,UACFiM,EAAWvB,GAAWmB,EANkB,EAOG7M,mBAAS,CACxDkN,SAAU,GACVC,UAAW,KATiC,0BAOrCD,EAPqC,EAOrCA,SAAUC,EAP2B,EAO3BA,UAAaC,EAPc,KAWxC3F,EAAYC,qBAAWC,KAEvB0F,EAAezK,uBAAY,4BAAA1B,EAAAC,OAAA,kEAAAD,EAAA,MACRoM,GAAYtM,EAAWwE,EAAKW,MAAMlE,GAAIuD,EAAKvD,KADnC,cACzBiL,EADyB,kBAAAhM,EAAA,MAEPqM,GAAavM,EAAWwE,EAAKW,MAAMlE,GAAIuD,EAAKvD,GAAI,CACtEuL,QAAS,UAHoB,OAEzBL,EAFyB,OAM/BC,EAAc,CAAEF,WAAUC,cANK,uCAO9B,CAACnM,EAAWwE,EAAKW,MAAMlE,GAAIuD,EAAKvD,KAE7BwL,EAAiB7K,sBAAYC,IAASwK,EAAc,KAAM,CAACA,IAEjE9M,qBAAU,WACR,IAAMmN,EAAwBjG,EAAUM,GAAGC,UAAb,eAA+BxC,EAAKvD,GAApC,eAAoD,WAChFwL,OAGIE,EAAwBlG,EAAUM,GAAGC,UAAb,eAA+BxC,EAAKvD,GAApC,cAAmD,WAC/EwL,OAGF,OAAO,WACLC,IACAC,OAED,CAAClG,EAAUM,GAAI0F,EAAgBjI,EAAKvD,KAEvC1B,qBAAU,WACR8M,MACC,CAACA,IA0BJ,IAAMO,EAAaC,mBAAQ,WACzB,IAAMD,EAAa,GADY,uBAG/B,YAAsBV,EAAtB,+CAAgC,CAAC,IAAtBxB,EAAqB,QAC9BkC,EAAWlF,KAAX,aACEoF,aAAc,WACXpC,KANwB,6GAU/B,YAAsByB,EAAtB,+CAAiC,CAAC,IAAvBY,EAAsB,QAC/BH,EAAWlF,KAAX,aACEoF,aAAc,WACXC,KAbwB,kFAiB/B,OAAOC,KAAOJ,GAAY,SAAUxF,GAClC,OAAIA,EAAK6F,UACA9B,mBAAS/D,EAAK6F,WAGnB7F,EAAK4D,KACAG,mBAAS/D,EAAK4D,WADvB,KAGCkC,YACF,CAAChB,EAAUC,IAEd,OACE,6BACE,wBAAIvM,UAAU,QAAO,kBAAC,IAAD,CAAiBsD,KAAMiK,MAA5C,aACA,yBAAKvN,UAAU,OACb,yBAAKA,UAAU,YACb,kBAAC,KAAD,CAAQP,KAAK,UAEf,yBAAKO,UAAU,aACb,kBAACgE,EAAD,CAAUQ,QA5DlB,WACE0H,GAAW,IA2DuBpI,OAxDpC,WACEoI,GAAW,IAuDuCzI,MAAOqH,EAAS5I,SAAU8J,IACrEK,GAAY,4BAAQ7I,KAAK,SAAS6F,SAAU8C,EAAQnM,UAAU,yBAAyBqC,QArDhG,SAA2BqB,GAA3B,SAAApD,EAAAC,OAAA,uDACE6L,GAAU,GADZ,oBAAA9L,EAAA,MAIUkN,GAAcpN,EAAWwE,EAAKW,MAAMlE,GAAIuD,EAAKvD,GAAI,CACrDK,KAAMoJ,KALZ,OAQIkB,EAAW,IARf,gDAUItD,EAAgB,KAAEG,SAVtB,yBAYIuD,GAAU,GAZd,6EAqDqB,QACZ3D,GAAgB,yBAAKzI,UAAU,sBAAsByI,KAG1D,6BACGuE,EAAWtG,KAAI,SAAC+G,EAAU5F,GAAX,OACd,kBAAC6F,GAAD,CAAUD,SAAUA,EAAU7I,KAAMA,EAAM9B,IAAK+E,SAOzD,SAAS6F,GAAUvO,GAGjB,MAA8B,YAFbA,EAAMsO,SAEVP,aACJ,kBAACS,GAAoBxO,GAErB,kBAACyO,GAAoBzO,GAIhC,SAASyO,GAAT,GAA+C,IAAnBH,EAAkB,EAAlBA,SAAU7I,EAAQ,EAARA,KAC5BxE,EAAc6E,cAAd7E,UACAyN,EAAW/G,qBAAWgH,MAAtBD,OAFoC,EAGdzO,oBAAS,GAHK,mBAGrC2F,EAHqC,KAG5BC,EAH4B,OAIpB5F,mBAASqO,EAAS/L,MAJE,mBAIrCA,EAJqC,KAI/BC,EAJ+B,OAKJvC,mBAAS,MALL,mBAKrCqJ,EALqC,KAKvBC,EALuB,OAMhBtJ,oBAAS,GANO,mBAMrC+M,EANqC,KAM7BC,EAN6B,KAkC5C,OAxBAzM,qBAAU,WACRgC,EAAQ8L,EAAS/L,QAChB,CAAC+L,EAAS/L,OAuBX,kBAACqM,GAAD,CAAiB/N,UAAU,OACzB,yBAAKA,UAAU,YACb,kBAAC,KAAD,CAAQP,KAAK,UAEf,yBAAKO,UAAU,aACZ+E,EACC,kBAAC,IAAM6F,SAAP,KACE,kBAAC5G,EAAD,CAAUP,MAAO/B,EAAMQ,SAAUP,IACjC,4BAAQ6B,KAAK,SAAS6F,SAAU8C,EAAQnM,UAAU,yBAAyBqC,QAzBrF,SAA2BqB,GAA3B,SAAApD,EAAAC,OAAA,uDACE6L,GAAU,GADZ,oBAAA9L,EAAA,MAIU0N,GAAY5N,EAAWwE,EAAKW,MAAMlE,GAAIuD,EAAKvD,GAAIoM,EAASpM,GAAI,CAChEK,UALN,OAQIsD,GAAW,GARf,gDAUI0D,EAAgB,KAAEG,SAVtB,yBAYIuD,GAAU,GAZd,6EAyBU,QACC3D,GAAgB,yBAAKzI,UAAU,sBAAsByI,IAGxD,6BACE,kBAAChE,EAAD,CAAUhB,MAAO/B,KAGrB,yBAAK1B,UAAU,QACZmL,GAAgBsC,EAASJ,YAE3BQ,IAAWJ,EAASpO,KAAKgC,IACxB,yBAAKrB,UAAU,WACb,0BAAMA,UAAU,cAAcqC,QAhDtB,kBAAM2C,GAAW,KAiDvB,kBAAC,IAAD,CAAiB1B,KAAMC,MADzB,SADF,OAKE,0BAAMvD,UAAU,cAAcqC,QA9CxC,YHvHK,SAAwBjC,EAAWC,EAASoF,EAAQpE,GAApD,EAAAf,EAAAC,OAAA,kEAAAD,EAAA,MACCE,YAAQ,CACZC,OAAQ,SACRC,IAAI,uBAAD,OAAyBN,EAAzB,mBAA6CC,EAA7C,kBAA8DoF,EAA9D,qBAAiFpE,MAHjF,qCGwHH4M,CAAe7N,EAAWwE,EAAKW,MAAMlE,GAAIuD,EAAKvD,GAAIoM,EAASpM,MA8CjD,kBAAC,IAAD,CAAiBiC,KAAMuH,MADzB,cAUZ,SAAS8C,GAAT,GAA+C,IAAnBF,EAAkB,EAAlBA,SACtBS,GADwC,EAARtJ,KACX,MAEzB,MAA8B,YAA1B6I,EAASP,eACXgB,EAwBJ,SAAiCT,GAC/B,IAAMU,EAAWV,EAASpO,KAAK+O,UAE/B,GAAsB,YAAlBX,EAASjK,KACX,MAAM,GAAN,OAAU2K,EAAV,qBAGF,GAAsB,YAAlBV,EAASjK,KAAoB,CAC/B,GAAIiK,EAAS5M,KAAKwN,QAAQC,YACxB,MAAM,GAAN,OAAUH,EAAV,wCAAkDV,EAAS5M,KAAKwN,QAAQC,aAG1E,GAAIb,EAAS5M,KAAKwN,QAAQE,KACxB,MAAM,GAAN,OAAUJ,EAAV,qCAA+CV,EAAS5M,KAAKwN,QAAQE,MAIzE,GAAsB,sBAAlBd,EAASjK,KAA8B,CACzC,IAAMgL,EAASf,EAAS5M,KAAK2N,OACvBC,EAAQhB,EAAS5M,KAAK4N,MAE5B,IAAKD,EAAO5I,SAAW6I,EAAM7I,QAC3B,MAAM,GAAN,OAAUuI,EAAV,6BAAuCM,EAAM/M,MAG/C,GAAI8M,EAAO5I,UAAY6I,EAAM7I,QAC3B,MAAM,GAAN,OAAUuI,EAAV,+BAAyCM,EAAM/M,OAlD5BgN,CAAuBjB,IAQ5C,kBAACM,GAAD,CAAiB/N,UAAU,OACzB,yBAAKA,UAAU,YACb,kBAAC,KAAD,CAAQP,KAAK,UAEf,yBAAKO,UAAU,aACb,6BACE,8BAAOkO,IAET,yBAAKlO,UAAU,QACZmL,GAAgBsC,EAASrC,SAdvB,kBAAC,IAAMR,SAAP,MAoDb,IAAMmD,GAAkB9N,IAAO8D,IAAV,M,8iBC1QN,SAAS4K,GAAMxP,GAAQ,IAAD,EACLC,oBAAS,GADJ,mBAC5BwP,EAD4B,KACnBC,EADmB,OAEXzP,mBAAS,MAFE,mBAE5BwF,EAF4B,KAEtBkK,EAFsB,OAGH1P,oBAAS,GAHN,mBAG5B2P,EAH4B,KAGlBC,EAHkB,OAIP5P,oBAAS,GAJF,mBAI5B6P,EAJ4B,KAIpBC,EAJoB,KAK7BC,EAASlK,cACT4B,EAAYC,qBAAWC,KAEvBqI,EAAcpN,uBAAY,0BAAA1B,EAAAC,OAAA,2EAAAD,EAAA,MAIf+O,YAAIF,EAAO/O,UAAWjB,EAAMkB,QAAS8O,EAAO1J,OAAQ,CAC/DmH,QAAS,WALiB,OAI5BhI,EAJ4B,sDAQxB,KAAEjE,UAAkC,MAAtB,KAAEA,SAAS2O,SAC3B1K,EAAO,MATmB,OAa9BkK,EAAQlK,GAbsB,0DAc7B,CAACuK,EAAO/O,UAAW+O,EAAO1J,OAAQtG,EAAMkB,UAsB3CV,qBAAU,WACRkP,GAAW,GAEX,EAAAvO,EAAAC,OAAA,kEAAAD,EAAA,MACQ8O,KADR,OAEEP,GAAW,GAFb,uCAMC,CAACM,EAAO/O,UAAW+O,EAAO1J,OAAQtG,EAAMkB,QAAS+O,IAEpDzP,qBAAU,WACR,GAAKiF,EAML,OAFAiC,EAAUM,GAAGoI,KAAb,eAA0B3K,EAAKvD,KAExB,WACLwF,EAAUM,GAAGqI,MAAb,eAA2B5K,EAAKvD,QAEjC,CAACwF,EAAUM,GAAIvC,IAElBjF,qBAAU,WACR,GAAKiF,EAAL,CAIA,IAAM6K,EAAqB5I,EAAUM,GAAGC,UAAb,eAA+BxC,EAAKvD,GAApC,YAAiD,WAC1E+N,OAGF,OAAO,WACLK,QAED,CAAC5I,EAAUM,GAAIiI,EAAaxK,IAE/B,IAAM8K,EAAmB1N,uBAAY,SAACN,GACpCN,YAAK+N,EAAO/O,UAAWjB,EAAMkB,QAAS8O,EAAO1J,OAAQ,CACnD8I,KAAM7M,MAEP,CAACyN,EAAO/O,UAAW+O,EAAO1J,OAAQtG,EAAMkB,UAErCsP,EAA0B3N,uBAAY,SAAC4N,GAC3CxO,YAAK+N,EAAO/O,UAAWjB,EAAMkB,QAAS8O,EAAO1J,OAAQ,CACnD6I,YAAasB,EAASlQ,SAASkQ,GAAU,SAE1C,CAACT,EAAO/O,UAAW+O,EAAO1J,OAAQtG,EAAMkB,UAE3C,OAAa,OAATuE,EACEgK,EAEA,kBAACiB,EAAA,EAAD,CAAOC,OAAQ3Q,EAAM2Q,OAAQC,OAAQ5Q,EAAM4Q,OAAQtQ,KAAK,MACtD,kBAACuQ,EAAA,EAAD,CAAaD,OAAQ5Q,EAAM4Q,QAA3B,gBAGA,kBAACE,EAAA,EAAD,KACE,kBAAC,IAAD,QAMJ,kBAACJ,EAAA,EAAD,CAAOC,OAAQ3Q,EAAM2Q,OAAQC,OAAQ5Q,EAAM4Q,OAAQtQ,KAAK,MACtD,kBAACuQ,EAAA,EAAD,CAAaD,OAAQ5Q,EAAM4Q,QAA3B,kBAGA,kBAACE,EAAA,EAAD,wDASN,kBAACJ,EAAA,EAAD,CAAOC,OAAQ3Q,EAAM2Q,OAAQC,OAAQ5Q,EAAM4Q,OAAQtQ,KAAK,MACtD,kBAACuQ,EAAA,EAAD,CAAaD,OAAQ5Q,EAAM4Q,QACzB,kBAACxO,EAAD,CAAcG,KAAMkD,EAAK2J,KAAMrM,SAAUwN,KAE3C,kBAACO,EAAA,EAAD,KACE,yBAAKjQ,UAAU,OACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,kBAACkQ,GAAD,KACE,yBAAKlQ,UAAU,sBAAf,gBAGA,4BAAQyD,MAAOmB,EAAK0J,aAAe,GAAIpM,SAAU,SAACiO,GAAD,OAAQR,EAAwBQ,EAAGxM,OAAOF,SACzF,4BAAQA,MAAM,KACd,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,OAAd,WAKR,kBAACkB,EAAD,CAAiBC,KAAMA,IACvB,kBAACwB,GAAD,CAAexB,KAAMA,IACrB,kBAACmH,GAAD,CAAcnH,KAAMA,KAEtB,kBAACwL,GAAD,CAAcpQ,UAAU,YACtB,yBAAKA,UAAU,4BAA4BqC,QAjIrD,oBAAA/B,EAAAC,OAAA,uDACEyO,GAAY,GADd,WAAA1O,EAAA,MAGQgB,YAAQ6N,EAAO/O,UAAWjB,EAAMkB,QAAS8O,EAAO1J,SAHxD,OAKEtG,EAAM4Q,SALR,sCAiIsE1G,SAAU0F,GACnEA,EAAW,WAAa,UAE3B,yBAAK/O,UAAU,0BAA0BqC,QA5HnD,oBAAA/B,EAAAC,OAAA,mDACE2O,GAAU,GAEc,WAApBtK,EAAKW,MAAM/B,KAHjB,kCAAAlD,EAAA,MAIU+P,YAAclB,EAAO/O,UAAWjB,EAAMkB,QAAS8O,EAAO1J,SAJhE,+CAAAnF,EAAA,MAMUgQ,YAAanB,EAAO/O,UAAWjB,EAAMkB,QAAS8O,EAAO1J,SAN/D,OASEtG,EAAM4Q,SATR,sCA4HkE1G,SAAU4F,GAC3C,WAApBrK,EAAKW,MAAM/B,KAAoB,kBAAoB,sBASlE,IAAM4M,GAAenQ,IAAO8D,IAAV,MAUZmM,GAAcjQ,IAAO8D,IAAV,M,UC1LFoC,2BAAc,MCId,SAASoK,GAAiBpR,GAAQ,IACvCqR,EAAarR,EAAbqR,SADsC,EAEtBpR,mBAAS,IAFa,mBAEvCmP,EAFuC,KAEjCkC,EAFiC,OAGpBrR,mBAAS,MAHW,mBAGvCsR,EAHuC,KAGhCC,EAHgC,OAIlBvR,mBAAS,IAJS,mBAIvC2B,EAJuC,KAI/B6P,EAJ+B,OAKhBxR,oBAAS,GALO,mBAKvCE,EALuC,KAK9BC,EAL8B,OAMfuH,qBAAW+J,IAAlCxQ,EANsC,EAMtCA,QAASD,EAN6B,EAM7BA,UAWjB,SAAS2P,IACPU,EAAQ,IACRE,EAAS,MACTxR,EAAM4Q,SAyBR,OArCIS,GAAazP,EAAOM,IAAO/B,IAC7BC,GAAW,GdHR,SAAoBa,EAAWC,EAASgB,GAAxC,eAAAf,EAAAC,OAAA,kEAAAD,EAAA,MACkBE,YAAQ,CAC7BC,OAAQ,MACRC,IAAI,uBAAD,OAAyBN,EAAzB,mBAA6CC,EAA7C,oBAAgEgB,MAHhE,cACCV,EADD,yBAMEC,YAAYD,EAASE,OANvB,qCcIHwO,CAAIjP,EAAWC,EAASmQ,GAAU3Q,MAAK,SAACc,GACtCiQ,EAAUjQ,GACV8P,EAAQ9P,EAAS4N,MACjBhP,GAAW,OAiCb,kBAACsQ,EAAA,EAAD,CAAOC,OAAQ3Q,EAAM2Q,OAAQC,OAAQA,GACnC,kBAACC,EAAA,EAAD,CAAaD,OAAQA,GAClBS,EAAW,cAAgB,iBAE9B,kBAACP,EAAA,EAAD,KACG3Q,EACC,kBAAC,IAAD,MAEA,yBAAKU,UAAU,cACb,uCACA,2BAAOwD,KAAK,OAAOxD,UAAU,eAAeyD,MAAO8K,EAAMrM,SAAU,SAACwB,GAAD,OAAO+M,EAAQ/M,EAAEC,OAAOF,WAG9FiN,GAAS,yBAAK1Q,UAAU,sBAAsB0Q,IAEjD,kBAACI,GAAA,EAAD,MACIxR,GACA,4BAAQU,UAAU,4BAA4BqC,QAxCtD,0BAAA/B,EAAAC,OAAA,4DAEUM,EAFV,eAEsBE,EAFtB,CAE8BwN,UAEtBiC,EAJR,kCAAAlQ,EAAA,MAKYc,EAAKhB,EAAWC,EAASmQ,EAAU3P,IAL/C,qCAOMA,EAAK+F,MAAQzH,EAAM4R,gBACnBlQ,EAAK2C,KAAO,QARlB,YAAAlD,EAAA,MASYQ,EAAOV,EAAWC,EAASQ,IATvC,QAYQ,WAAY1B,GACdA,EAAM6R,SAGRjB,IAhBJ,kDAkBIY,EAAS,KAAE9H,SAlBf,2DAyCW2H,EAAW,OAAS,YCnElB,SAASS,GAAc9R,GACpC,OACE,kBAAC0Q,EAAA,EAAD,CAAOC,OAAQ3Q,EAAM2Q,OAAQC,OAAQ5Q,EAAM4Q,QACzC,kBAACC,EAAA,EAAD,CAAaD,OAAQ5Q,EAAM4Q,QAA3B,aAGA,kBAACE,EAAA,EAAD,KACE,yBAAKiB,MAAM,uBACR/R,EAAM0J,UAGX,kBAACiI,GAAA,EAAD,KACE,4BAAQ9Q,UAAU,4BAA4BqC,QAASlD,EAAMgS,WAA7D,OADF,OAKE,4BAAQnR,UAAU,2BAA2BqC,QAASlD,EAAM4Q,QAA5D,QCTO,SAASqB,GAAT,GAAqD,IAA5BZ,EAA2B,EAA3BA,SAAUa,EAAiB,EAAjBA,cAAiB,EACzCjS,mBAAS,IADgC,mBAC1DmP,EAD0D,KACpDkC,EADoD,OAEnCrR,oBAAS,GAF0B,mBAE1DE,EAF0D,KAEjDC,EAFiD,OAGzBH,mBAAS,MAHgB,mBAG1DqJ,EAH0D,KAG5CC,EAH4C,OAIlC5B,qBAAW+J,IAAlCxQ,EAJyD,EAIzDA,QAASD,EAJgD,EAIhDA,UAwBjB,OACE,0BAAM0I,SAvBR,SAAyBqH,GAAzB,eAAA7P,EAAAC,OAAA,uDACE4P,EAAGvH,iBACHrJ,GAAW,GACXmJ,EAAgB,MAHlB,SAMU9D,EAAO,CACX2J,OACAxN,OAAQyP,EACR5J,MAAOyK,EAAgB,GAT7B,WAAA/Q,EAAA,MAYUQ,YAAOV,EAAWC,EAASuE,IAZrC,OAcI6L,EAAQ,IAdZ,kDAgBI/H,EAAgB,KAAEG,SAhBtB,yBAkBItJ,GAAW,GAlBf,8EAwBI,kBAACwJ,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOvF,MAAO8K,EAAMrM,SAAU,SAACwB,GAAD,OAAO+M,EAAQ/M,EAAEC,OAAOF,UACtD,kBAACwF,EAAA,EAAD,CAAiBC,UAAU,UACzB,kBAACC,EAAA,EAAD,CAAQC,MAAM,UAAUC,SAAU/J,GAAWA,EAAU,OAAS,SAGnEmJ,GACC,yBAAKzI,UAAU,sBACZyI,I,6FCzCI,SAAS6I,GAAT,GAA+C,IAA1B1M,EAAyB,EAAzBA,KAAM4L,EAAmB,EAAnBA,SAAU3I,EAAS,EAATA,MAAS,EAKvDf,qBAAW+J,IAHbzQ,EAFyD,EAEzDA,UACAmR,EAHyD,EAGzDA,SACAC,EAJyD,EAIzDA,iBAGIpP,EAAMP,iBAAO,MAEb4P,EAAWC,cACXvE,EAAUwE,cAEZC,EAAO,8BAA0BxR,EAA1B,0BAAqDwE,EAAKvD,IAErE,GAAI,UAAUwQ,KAAKJ,EAASK,UAAW,CACrC,IAAMC,EAAQN,EAASK,SAASC,MAAM,oBACtCH,EAAO,8BAA0BxR,EAA1B,oBAA+C2R,EAAM,GAArD,kBAAiEnN,EAAKvD,IAG/E,IAAM2Q,EAAWhQ,uBAAY,WAC3BmL,EAAQrF,KAAK8J,KACZ,CAACzE,EAASyE,IArB8C,EAuBvCtI,YAAQ,CAC1BC,OAAQC,KAAUyI,KAClBvI,MAF0B,SAEnBlC,EAAMmC,GACX,GAAKvH,EAAIxC,QAAT,CAIA,IAAM0H,EAAYE,EAAKK,MACjBN,EAAaM,EACbqK,EAAe1K,EAAKgJ,SACpB2B,EAAgB3B,EAEtB,GAAIlJ,IAAcC,GAAc2K,IAAiBC,EAAjD,CAIA,IAAMvI,EAAoBxH,EAAIxC,QAAQiK,wBAChCC,GAAgBF,EAAkBG,OAASH,EAAkBI,KAAO,EAEpEC,EADeN,EAAQO,kBACKC,EAAIP,EAAkBI,IAEpDkI,IAAiBC,GAAiB7K,EAAYC,GAAc0C,EAAeH,GAI3EoI,IAAiBC,GAAiB7K,EAAYC,GAAc0C,EAAeH,IAI/EyH,EAASW,EAAc5K,EAAW6K,EAAe5K,GAEjDC,EAAKK,MAAQN,EACbC,EAAKgJ,SAAW2B,MAElB/H,KAlC0B,WAmCxBoH,OAnCKnH,EAvBkD,sBA8D5BC,YAAQ,CACrC9C,KAAK,eAAM5C,EAAP,CAAapB,KAAMgG,KAAUyI,KAAMzB,WAAU3I,UACjD0C,QAAS,SAAAZ,GAAO,MAAK,CACnBa,QAASb,EAAQc,aAAe,EAAI,MAjEmB,mBA8DlDD,EA9DkD,KA8DlDA,QAST,OAFAE,EArE2D,MAqEnDL,EAAQjI,IAGd,kBAACgQ,GAAD,CAAMpS,UAAU,OAAOoC,IAAKA,EAAKW,MAAO,CAAEyH,WAAWnI,QAAS2P,GAC5D,yBAAKhS,UAAU,aACZ4E,EAAK2J,KACL3J,EAAK0J,YACJ,0BAAMtO,UAAU,+BACb4E,EAAK0J,aAEN,OAMZ,IAAM8D,GAAOnS,IAAO8D,IAAV,M,q3BC/EK,SAASsO,GAAQlT,GAAQ,IAEpCmT,EAGEnT,EAHFmT,MACAvR,EAEE5B,EAFF4B,OACA8G,EACE1I,EADF0I,MAJmC,EAODzI,oBAAS,GAPR,mBAO9BmT,EAP8B,KAOlBC,EAPkB,OAQCpT,oBAAS,GARV,mBAQ9BqT,EAR8B,KAQjBC,EARiB,KAU/BC,EAAiB1F,mBAAQ,WAC7B,OAAOqF,EAAMM,QAAO,SAACC,EAAKjO,GAAN,OAAeiO,GAAOjO,EAAK0J,aAAe,KAAI,KACjE,CAACgE,IAZiC,EAsBjCxL,qBAAW+J,IAPbxQ,EAfmC,EAenCA,QACAD,EAhBmC,EAgBnCA,UACA0S,EAjBmC,EAiBnCA,WACAvB,EAlBmC,EAkBnCA,SACAwB,EAnBmC,EAmBnCA,mBACAvB,EApBmC,EAoBnCA,iBACAwB,EArBmC,EAqBnCA,eAGIC,EAAmB,kBAAMT,GAAeD,IACxCW,EAAoB,kBAAMR,GAAgBD,IAE1CrQ,EAAMP,iBAAO,MA3BkB,EA6BjByH,YAAQ,CAC1BC,OAAQ,CAACC,KAAU2J,OAAQ3J,KAAUyI,MACrCvI,MAF0B,SAEnBlC,EAAMmC,GACX,GAAInC,EAAKhE,OAASgG,KAAU2J,OAAQ,CAClC,IAAK/Q,EAAIxC,QACP,OAGF,IAAM0H,EAAYE,EAAKK,MACjBN,EAAaM,EAEnB,GAAIP,IAAcC,EAChB,OAGF,IAAMqC,EAAoBxH,EAAIxC,QAAQiK,wBAChCuJ,GAAgBxJ,EAAkByJ,MAAQzJ,EAAkB0J,MAAQ,EAEpEC,EADe5J,EAAQO,kBACKsJ,EAAI5J,EAAkB0J,KAExD,GAAIhM,EAAYC,GAAcgM,EAAeH,EAC3C,OAGF,GAAI9L,EAAYC,GAAcgM,EAAeH,EAC3C,OAGFN,EAAWxL,EAAWC,GAEtBC,EAAKK,MAAQN,OACJC,EAAKhE,OAASgG,KAAUyI,MAC7BzK,EAAKgJ,WAAazP,EAAOM,KAC3BkQ,EAAS/J,EAAKgJ,SAAUhJ,EAAKK,MAAO9G,EAAOM,GAAIiR,EAAMvK,QACrDP,EAAKgJ,SAAWzP,EAAOM,GACvBmG,EAAKK,MAAQyK,EAAMvK,SAIzBqC,KAvC0B,SAuCpB5C,EAAMmC,GACNnC,EAAKhE,OAASgG,KAAU2J,OAC1BJ,IACSvL,EAAKhE,OAASgG,KAAUyI,MACjCT,OA3CGnH,EA7B4B,sBA6ESC,YAAQ,CACpD9C,KAAM,CAAEhE,KAAMgG,KAAU2J,OAAQ9R,GAAIN,EAAOM,GAAIwG,SAC/C0C,QAAS,SAAAZ,GAAO,MAAK,CACnBc,WAAYd,EAAQc,iBAhFa,mBA6E5BA,EA7E4B,KA6E5BA,WAAcC,EA7Ec,KA6EL+I,EA7EK,KA0FrC,IAAMC,EAAmB,CAAC,YAEtBjJ,GACFiJ,EAAiB5L,KAAK,eAGxB2L,EAAWpJ,EAAQjI,IAEnB,IAAMiP,EAAgBiB,EAAMM,QAAO,SAACC,EAAKjO,GACvC,OAAIA,EAAKgC,MAAQiM,EACRjO,EAAKgC,MAGPiM,KACL,GAEJ,OACE,kBAACc,GAAD,CAAW3T,UAAW0T,EAAiBnE,KAAK,KAAMnN,IAAKA,GACrD,kBAACwR,GAAD,CAAa5T,UAAU,OAAOoC,IAAKsI,GAChC3J,EAAOwN,KACR,kBAACsF,GAAD,KACGlB,EAAiB,EAChB,0BAAM3S,UAAU,kDACb2S,GAED,KAEa,UAAhB5R,EAAOyC,MACN,kBAAC,IAAMoH,SAAP,KACE,4BAAQ5K,UAAU,yBAAyBqC,QAAS4Q,GAClD,kBAAC,IAAD,CAAiB3P,KAAMwQ,OAExBvB,GACC,kBAAChC,GAAD,CACET,OAAQyC,EACRxC,OAAQkD,EACR7S,UAAWA,EACXC,QAASA,EACTmQ,SAAUzP,EAAOM,GACjB2P,OAAQgC,IAEZ,4BAAQhT,UAAU,wBAAwBqC,QAAS6Q,GACjD,kBAAC,IAAD,CAAiB5P,KAAMyQ,OAEzB,kBAAC9C,GAAD,CACEnB,OAAQ2C,EACR1C,OAAQmD,EACRrK,QAAQ,8CACRsI,UAtDd,oBAAA7Q,EAAAC,OAAA,uDACE2S,IADF,WAAA5S,EAAA,MAEQgB,EAAQlB,EAAWC,EAASU,EAAOM,KAF3C,OAGE2R,IAHF,2CA2DI,kBAACgB,GAAD,KACG1B,EAAM5L,KAAI,SAAC9B,EAAMiD,GAAP,OACT,kBAACyJ,GAAD,CACExO,IAAK8B,EAAKvD,GACVwG,MAAOA,EACP2I,SAAUzP,EAAOM,GACjBuD,KAAMA,OAGV,kBAACwM,GAAD,CACEZ,SAAUzP,EAAOM,GACjBgQ,cAAeA,MAOzB,IAAMsC,GAAY1T,IAAO8D,IAAV,MAST6P,GAAc3T,IAAO8D,IAAV,MAeX8P,GAAU5T,IAAO8D,IAAV,MAWPiQ,GAAa/T,IAAO8D,IAAV,M,yIC5LhB,IAAMkQ,GAAgB,CACpBC,OAAQ,CACN5B,MAAO,wCAII,SAAS6B,GAAWhV,GAAQ,IACjCoG,EAAUpG,EAAVoG,MACFnF,EAAYgU,cAFsB,EAGNhV,mBAAS,CAAEwP,SAAS,IAHd,mBAGjCyF,EAHiC,KAGtBC,EAHsB,KAIhC1F,EAA4ByF,EAA5BzF,QAAS0D,EAAmB+B,EAAnB/B,MAAOiC,EAAYF,EAAZE,QAClBC,EAAaxS,uBAAY,SAACuS,GAC9BD,EAAa,eAAKD,EAAN,CAAiBE,eAC5B,CAACF,IACEI,EAAWzS,uBAAY,SAACsQ,GAC5BgC,EAAa,eAAKD,EAAN,CAAiB/B,aAC5B,CAAC+B,IAVoC,EAWJjV,oBAAS,GAXL,mBAWjCmT,EAXiC,KAWrBC,EAXqB,OAYEpT,mBAAS,IAZX,mBAYjCsV,EAZiC,KAYlBC,EAZkB,KAalC9N,EAAYC,qBAAWC,KACvBoG,EAAUwE,cACVF,EAAWC,cAEXkD,EAAkB5S,uBAAY,WAClC,IAAM6S,EAAUpD,EAASK,SAASgD,QAAQ,YAAa,IACvD3H,EAAQrF,KAAK+M,KACZ,CAAC1H,EAASsE,EAASK,WAEtBnS,qBAAU,WAGR,OAFAkH,EAAUM,GAAGoI,KAAb,gBAA2BhK,EAAMlE,KAE1B,WACLwF,EAAUM,GAAGqI,MAAb,gBAA4BjK,EAAMlE,QAEnC,CAACkE,EAAMlE,GAAIwF,EAAUM,KAExB,IAAM8L,EAAmB,kBAAMT,GAAeD,IAExCS,EAAiBhR,sBACrBC,KAAS,WACP8S,EAAY3U,EAAWmF,EAAMlE,IAAIxB,KAAK2U,KACrC,KACH,CAACpU,EAAWmF,EAAMlE,GAAImT,IAGlBQ,EAAehT,sBACnBC,KAAS,WACPgT,YAAU7U,EAAWmF,EAAMlE,GAAI4S,IAAepU,KAAK4U,KAClD,KACH,CAACrU,EAAWmF,EAAMlE,GAAIoT,IAGxB9U,qBAAU,WACR,IAAMuV,EAAuBrO,EAAUM,GAAGC,UAAb,gBAAgC7B,EAAMlE,GAAtC,cAAqD,WAChF2R,OAGIvD,EAAqB5I,EAAUM,GAAGC,UAAb,gBAAgC7B,EAAMlE,GAAtC,YAAmD,WAC5E2T,OAGF,OAAO,WACLE,IACAzF,OAED,CAACrP,EAAWmF,EAAMlE,GAAIwF,EAAUM,GAAI6L,EAAgBgC,IAEvDrV,qBAAU,WACR,IAAMwV,EAAS,GAEf,IAAIvG,EAAJ,CAIA,GAAI2F,EAAS,CAAC,IAAD,uBACX,YAAqBA,EAArB,+CAA8B,CAAC,IAApBxT,EAAmB,QAE1BoU,EAAOpU,EAAOM,IADZiR,EACkB8C,GAAY9C,EAAOvR,EAAOM,IAE1B,IALb,mFAUbsT,EAAiBQ,MAChB,CAACZ,EAASjC,EAAOqC,EAAkB/F,IAEtC,IAAMkE,EAAa9Q,uBACjB,SAACsF,EAAWC,GACV,IAAM8N,EAAad,EAAQjN,GAE3BkN,EACE/M,KAAO8M,EAAS,CACd7M,QAAS,CACP,CAACJ,EAAW,GACZ,CAACC,EAAY,EAAG8N,SAKxB,CAACd,EAASC,IAGNzB,EAAqB/Q,sBACzBC,KAAS,WACP,IAAM+F,EAAqB,GAE3B,IAAK,IAAMH,KAAS0M,EAAS,CAC3B,IAAMxT,EAASwT,EAAQ1M,GACjBjB,EAAQlH,SAASmI,GAEnB9G,EAAO6F,QAAUA,GACnBoB,EAAmBF,KAAK,CACtBzG,GAAIN,EAAOM,GACXuF,UAkBFoB,EAAmBD,OAAS,GAbhC,SAAyBC,GAAzB,oBAAA1H,EAAAC,OAAA,gDAGE,IAFM0H,EAAW,GADnB,4BAGE,EAAqBD,EAArB,+CAAWP,EAA8B,QACvCQ,EAASH,KAAKwN,EAAWlV,EAAWmF,EAAMlE,GAAIoG,EAAOpG,GAAI,CACvDuF,MAAOa,EAAOb,SALpB,0PAAAtG,EAAA,MASQ4H,QAAQC,IAAIF,IATpB,QAUE8M,EAAY3U,EAAWmF,EAAMlE,IAAIxB,KAAK2U,GAVxC,0EAcEpM,CAASJ,KAEV,KACH,CAACzC,EAAMlE,GAAIkT,EAASnU,IAGhBoR,EAAmBxP,sBACvBC,KAAS,WACP,IAAMsT,EAAU,GAEhB,IAAK,IAAM/E,KAAYkE,EACrB,IAAK,IAAM7M,KAAS6M,EAAclE,GAAW,CAC3C,IAAM5L,EAAO8P,EAAclE,GAAU3I,GAC/BjB,EAAQlH,SAASmI,GAEvB,GAAIjD,EAAKgC,QAAUA,GAAShC,EAAK7D,OAAOM,KAAOmP,EAAU,CACvD,IAAM/I,EAAS,CACbpG,GAAIuD,EAAKvD,IAGPuD,EAAKgC,QAAUA,IACjBa,EAAOb,MAAQA,GAGbhC,EAAK7D,OAAOM,KAAOmP,IACrB/I,EAAO1G,OAASyP,GAGlB+E,EAAQzN,KAAKL,IAef8N,EAAQxN,OAAS,GAVrB,+BAAAzH,EAAAC,OAAA,gDAGE,IAFM0H,EAAW,GADnB,4BAGE,EAAqBsN,EAArB,+CAAW9N,EAAmB,QAC5BQ,EAASH,KAAK0N,YAASpV,EAAWmF,EAAMlE,GAAIoG,EAAOpG,GAAIoG,IAJ3D,0PAAAnH,EAAA,MAOQ4H,QAAQC,IAAIF,IAPpB,0EAWEG,KAED,KACH,CAACsM,IAGGnD,EAAWvP,uBACf,SAACkQ,EAAc5K,EAAW6K,EAAe5K,GACvC,IAAM3C,EAAO8P,EAAcxC,GAAc5K,GAEzCqN,EACElN,KACEA,KAAOiN,EAAD,eACHxC,EAAe,CAAExK,QAAS,CAAC,CAACJ,EAAW,OAFtC,eAID6K,EAAgB,CAAEzK,QAAS,CAAC,CAACH,EAAY,EAAG3C,UAKrD,CAAC8P,IAuBH,GApBA/U,qBAAU,WAeJiP,GAdJ,gCAAAtO,EAAAC,OAAA,kEAAAD,EAAA,MACiC4H,QAAQC,IAAI,CACzC4M,EAAY3U,EAAWmF,EAAMlE,IAC7B4T,YAAU7U,EAAWmF,EAAMlE,GAAI4S,OAHnC,0CACSM,EADT,KACkBjC,EADlB,sCAOO+B,EAPP,CAQIE,UACAjC,QACA1D,SAAS,KAVb,qCAeE6G,GAAO5V,KAAKyU,KAEb,CAAC/O,EAAMlE,GAAIgT,EAAWzF,EAASxO,IAE9BwO,EACF,OAAO,kBAAC,IAAD,MAGT,IAAI8G,EAAkB,KA1NkB,uBA4NxC,YAAqBnB,EAArB,+CAA8B,CAAC,IAApBxT,EAAmB,SACJ,OAApB2U,GAA4B3U,EAAO6F,MAAQ8O,KAC7CA,EAAkB3U,EAAO6F,QA9NW,kFAkOxC,IAAMmK,EAAkB2E,EAAkB,EAE1C,OACE,kBAAC,GAAarN,SAAd,CAAuB5E,MAAO,CAC5BrD,YACAC,QAASkF,EAAMlE,GACfyR,aACAC,qBACAvB,mBACAwB,iBACAzB,aAEA,yBAAKvR,UAAU,OACZuU,EAAQ7N,KAAI,SAAC3F,EAAQ8G,GAAT,OACX,kBAACwK,GAAD,CACEvP,IAAK/B,EAAOM,GACZN,OAAQA,EACRuR,MAAOoC,EAAc3T,EAAOM,KAAO,GACnCwG,MAAOA,OAGX,yBAAK7H,UAAU,YACb,kBAAC2V,GAAD,CAAW3V,UAAU,4BAA4BqC,QAAS4Q,GAA1D,kBAKJ,kBAAC1C,GAAD,CACET,OAAQyC,EACRxC,OAAQkD,EACRlC,gBAAiBA,EACjBC,OAAQgC,IAEV,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO4C,KAAK,0EACV,kBAACjH,GAAD,CACEmB,QAAQ,EACRzP,QAASkF,EAAMlE,GACf0O,OAAQ6E,KAEZ,kBAAC,IAAD,CAAOgB,KAAK,kEACV,kBAACjH,GAAD,CACEmB,QAAQ,EACRzP,QAASkF,EAAMlE,GACf0O,OAAQ6E,OAOpB,SAASQ,GAAa9C,EAAO9B,GAC3B,OAAO8B,EAAMuD,QAAO,SAACjR,GACnB,OAAOA,EAAK7D,OAAOM,KAAOmP,KAI9B,IAAMmF,GAAY1V,IAAO6V,OAAV","file":"static/js/3.441f9117.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Gravatar from 'react-gravatar'\nimport { current } from '../../services/user-service'\nimport styled from 'styled-components'\n\nexport default function Avatar (props) {\n  const [loading, setLoading] = useState(!props.user)\n  const [user, setUser] = useState(props.user)\n  const size = props.size ? parseInt(props.size) : 150\n\n  useEffect(() => {\n    if (!user && loading) {\n      current().then((user) => {\n        setLoading(false)\n        setUser(user)\n      })\n    }\n  }, [loading, user])\n\n  if (!user) {\n    return <span></span>\n  }\n\n  return (\n    <Wrapper size={size}>\n      <Gravatar email={user.email} size={size} className=\"avatar border-gray\" />\n    </Wrapper>\n  )\n}\n\nconst Wrapper = styled.span`\n  .avatar {\n    width: ${props => props.size} !important;\n    height: unset !important;\n    max-width: unset;\n  }\n`\n","import { request } from '../../../core/client'\nimport { serialize, deserialize } from 'jsonapi-fractal'\n\nexport async function list (projectId, boardId) {\n  const response = await request({\n    method: 'GET',\n    url: `/dashboard/projects/${projectId}/boards/${boardId}/columns`\n  })\n\n  return deserialize(response.data)\n}\n\nexport async function get (projectId, boardId, id) {\n  const response = await request({\n    method: 'GET',\n    url: `/dashboard/projects/${projectId}/boards/${boardId}/columns/${id}`\n  })\n\n  return deserialize(response.data)\n}\n\nexport async function create (projectId, boardId, column) {\n  let response\n\n  try {\n    response = await request({\n      method: 'POST',\n      url: `/dashboard/projects/${projectId}/boards/${boardId}/columns`,\n      data: serialize(column, 'columns')\n    })\n  } catch (e) {\n    throw new Error(e.response.data.errors[0].detail)\n  }\n\n  return deserialize(response.data)\n}\n\nexport async function edit (projectId, boardId, id, column) {\n  let response\n\n  try {\n    response = await request({\n      method: 'PATCH',\n      url: `/dashboard/projects/${projectId}/boards/${boardId}/columns/${id}`,\n      data: serialize(column, 'columns')\n    })\n  } catch (e) {\n    throw new Error(e.response.data.errors[0].detail)\n  }\n\n  return deserialize(response.data)\n}\n\nexport async function destroy (projectId, boardId, id) {\n  try {\n    await request({\n      method: 'DELETE',\n      url: `/dashboard/projects/${projectId}/boards/${boardId}/columns/${id}`\n    })\n  } catch (e) {\n    throw new Error(e.response.data.errors[0].detail)\n  }\n}\n","import React, { useState, useRef, useEffect, useCallback } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPen } from '@fortawesome/free-solid-svg-icons'\nimport styled from 'styled-components'\nimport debounce from 'debounce'\n\nexport default function EditableText (props) {\n  const [mode, setMode] = useState('view')\n  const [text, setText] = useState(props.text)\n  const textLabelRef = useRef()\n  const textInputRef = useRef()\n\n  useEffect(() => {\n    setText(props.text)\n  }, [props.text])\n\n  function toggleMode () {\n    if (mode === 'view') {\n      changeInputStyle()\n    }\n\n    setMode(mode === 'view' ? 'edit' : 'view')\n\n    if (mode === 'view') {\n      textInputRef.current.focus()\n    }\n  }\n\n  function changeInputStyle () {\n    copyNodeStyle(textLabelRef.current, textInputRef.current)\n  }\n\n  function copyNodeStyle (sourceNode, targetNode) {\n    const computedStyle = window.getComputedStyle(sourceNode)\n    Array.from(computedStyle).forEach(key => targetNode.style.setProperty(key, computedStyle.getPropertyValue(key), computedStyle.getPropertyPriority(key)))\n  }\n\n  function onKeyPress (event) {\n    if (event.key === 'Enter') {\n      setMode('view')\n      change(text)\n    }\n  }\n\n  function onBlur (event) {\n    setMode('view')\n\n    if (text !== props.text) {\n      change(text)\n    }\n  }\n\n  const change = useCallback(\n    debounce((text) => {\n      props.onChange(text)\n    }, 500),\n    [props.onChange]\n  )\n\n  return (\n    <Wrapper className={`mode-${mode}`}>\n      <TextLabel\n        ref={textLabelRef}\n        onClick={toggleMode}\n        style={{ display: mode === 'view' ? 'block' : 'none' }}\n      >\n        {text}\n        <span className=\"edit-button\">\n          &nbsp;\n          <FontAwesomeIcon icon={faPen} />\n        </span>\n      </TextLabel>\n      <input\n        ref={textInputRef}\n        type=\"text\"\n        value={text}\n        onChange={(e) => setText(e.target.value)}\n        onKeyPress={onKeyPress}\n        onBlur={onBlur}\n        style={{ display: mode === 'edit' ? 'block' : 'none' }}\n      />\n    </Wrapper>\n  )\n}\n\nconst TextLabel = styled.div`\n  .edit-button {\n    display: none;\n  }\n\n  :hover {\n    .edit-button {\n      display: inline;\n    }\n  }\n`\n\nconst Wrapper = styled.div`\n  &.mode-edit {\n    outline: 1px solid #51cbce;\n  }\n`\n","import React, { useRef, useEffect, useState, useCallback } from 'react'\nimport styled from 'styled-components'\n\nexport default function TextArea (props) {\n  const [value, setValue] = useState(props.value)\n  let textAreaRef = useRef()\n\n  useEffect(() => {\n    setValue(props.value)\n  }, [props.value])\n\n  if (props.innerRef) {\n    textAreaRef = props.innerRef\n  }\n\n  useEffect(() => {\n    textAreaRef.current.style.height = '0px'\n\n    let newHeight = textAreaRef.current.scrollHeight + 2\n\n    if (newHeight < 44) {\n      newHeight = 44\n    }\n\n    textAreaRef.current.style.height = newHeight + 'px'\n  }, [value])\n\n  const handleOnChange = useCallback((value) => {\n    props.onChange(value)\n    setValue(value)\n  }, [props])\n\n  return (\n    <Wrapper>\n      <textarea\n        ref={textAreaRef}\n        className=\"form-control\"\n        onChange={(e) => handleOnChange(e.target.value)}\n        value={value}\n        onFocus={props.onFocus}\n        onBlur={props.onBlur}\n      />\n    </Wrapper>\n  )\n}\n\nconst Wrapper = styled.div`\n  textarea {\n    padding: 0.5em !important;\n    max-height: 1000px !important;\n  }\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport ReactMarkdown from 'react-markdown'\n\nexport default function Markdown (props) {\n  return (\n    <Wrapper>\n      <ReactMarkdown source={props.value} />\n    </Wrapper>\n  )\n}\n\nconst Wrapper = styled.div`\n  h1 {\n    font-size: 2em !important;\n  }\n\n  h2 {\n    font-size: 1.5em !important;\n  }\n\n  h3, h4, h5, h6 {\n    font-size: 1em !important;\n    font-weight: bold !important;\n  }\n\n  p:last-child {\n    margin-bottom: 0;\n  }\n`\n","import React, { useEffect, useState, useCallback, useRef } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faAlignJustify } from '@fortawesome/free-solid-svg-icons'\nimport { edit } from '../../services/task-service'\nimport TextArea from '../../../theme/components/text-area'\nimport Markdown from '../../../theme/components/markdown'\n\nexport default function TaskDescription ({ task }) {\n  const [description, setDescription] = useState(task.description)\n  const [editing, setEditing] = useState(false)\n  const { projectId } = useParams()\n  const textAreaRef = useRef()\n\n  useEffect(() => {\n    setDescription(task.description)\n  }, [task.description])\n\n  useEffect(() => {\n    if (editing) {\n      console.log('focus')\n      textAreaRef.current.focus()\n    }\n  }, [editing])\n\n  const handleStartEdit = useCallback(() => {\n    setEditing(true)\n  }, [])\n\n  const handleEditing = useCallback((value) => {\n    setDescription(value)\n  }, [])\n\n  const handleFinishEdit = useCallback((value) => {\n    setEditing(false)\n\n    edit(projectId, task.board.id, task.id, {\n      description\n    })\n  }, [description, projectId, task.board.id, task.id])\n\n  return (\n    <div>\n      <h6 className=\"mt-3\">\n        <FontAwesomeIcon icon={faAlignJustify} /> Description\n        &nbsp;\n        {!editing && <button className=\"btn btn-primary btn-sm mt-0 mb-0\" onClick={handleStartEdit}>Edit</button>}\n      </h6>\n      <div style={{ display: editing ? 'block' : 'none' }}>\n        <TextArea innerRef={textAreaRef} onChange={(value) => handleEditing(value)} value={description} />\n        <button className=\"btn btn-primary btn-sm\" onClick={handleFinishEdit}>Save</button>\n      </div>\n      <div style={{ display: editing ? 'none' : 'block' }}>\n        <Markdown value={description} />\n      </div>\n    </div>\n  )\n}\n","import { request } from '../../../core/client'\nimport { serialize, deserialize } from 'jsonapi-fractal'\n\nexport async function list (projectId, boardId, taskId) {\n  const response = await request({\n    method: 'GET',\n    url: `/dashboard/projects/${projectId}/boards/${boardId}/tasks/${taskId}/check-items`\n  })\n\n  return deserialize(response.data)\n}\n\nexport async function create (projectId, boardId, taskId, checkItem) {\n  let response\n\n  try {\n    response = await request({\n      method: 'POST',\n      url: `/dashboard/projects/${projectId}/boards/${boardId}/tasks/${taskId}/check-items`,\n      data: serialize(checkItem, 'check-items')\n    })\n  } catch (e) {\n    throw new Error(e.response.data.errors[0].detail)\n  }\n\n  return deserialize(response.data)\n}\n\nexport async function edit (projectId, boardId, taskId, id, checkItem) {\n  let response\n\n  try {\n    response = await request({\n      method: 'PATCH',\n      url: `/dashboard/projects/${projectId}/boards/${boardId}/tasks/${taskId}/check-items/${id}`,\n      data: serialize(checkItem, 'tasks')\n    })\n  } catch (e) {\n    throw new Error(e.response.data.errors[0].detail)\n  }\n\n  return deserialize(response.data)\n}\n\nexport async function destroy (projectId, boardId, taskId, id) {\n  await request({\n    method: 'DELETE',\n    url: `/dashboard/projects/${projectId}/boards/${boardId}/tasks/${taskId}/check-items/${id}`\n  })\n}\n","import React, { useState, useEffect } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCheckCircle } from '@fortawesome/free-solid-svg-icons'\nimport { faCircle } from '@fortawesome/free-regular-svg-icons'\nimport styled from 'styled-components'\n\nexport default function Checkbox (props) {\n  const [checked, setChecked] = useState(props.checked)\n\n  useEffect(() => {\n    setChecked(props.checked)\n  }, [props.checked])\n\n  function handleClick () {\n    const newChecked = !checked\n    setChecked(newChecked)\n\n    if (props.onChange) {\n      props.onChange(newChecked)\n    }\n  }\n\n  if (checked) {\n    return (\n      <Wrapper onClick={handleClick}>\n        <FontAwesomeIcon className=\"active\" icon={faCheckCircle} />\n      </Wrapper>\n    )\n  } else {\n    return (\n      <Wrapper onClick={handleClick}>\n        <FontAwesomeIcon className=\"inactive\" icon={faCircle} />\n      </Wrapper>\n    )\n  }\n}\n\nconst Wrapper = styled.span`\n  font-size: 1.5em;\n  vertical-align: middle;\n  cursor: pointer;\n\n  .inactive {\n    color: #aaa;\n  }\n\n  .active {\n    color: #51cbce;\n  }\n`\n","import React, { useState, useCallback, useEffect, createContext, useContext, useRef } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTasks, faTimes, faPen } from '@fortawesome/free-solid-svg-icons'\nimport { Input, InputGroup, InputGroupAddon, Button } from 'reactstrap'\nimport { list, create, edit, destroy } from '../../services/check-item-service'\nimport { useDrag, useDrop } from 'react-dnd'\nimport Checkbox from '../../../theme/components/checkbox'\nimport debounce from 'debounce'\nimport Container from '../../../../core/container'\nimport styled from 'styled-components'\nimport update from 'immutability-helper'\nimport { ItemTypes } from '../../../app/dnd'\n\nconst TaskChecklistContext = createContext(null)\n\nexport default function TaskChecklist ({ task }) {\n  const [checkItems, setCheckItems] = useState([])\n  const { projectId } = useParams()\n  const nextOrder = Math.max(0, ...checkItems.map((c) => c.order + 1))\n  const container = useContext(Container)\n\n  const reloadCheckItems = useCallback(async () => {\n    setCheckItems(await list(projectId, task.board.id, task.id))\n  }, [projectId, task.board.id, task.id])\n\n  const reloadCheckItemsDebounce = useCallback(debounce(reloadCheckItems, 500), [reloadCheckItems])\n\n  useEffect(() => {\n    reloadCheckItems()\n  }, [reloadCheckItems])\n\n  useEffect(() => {\n    const removeListener = container.ws.onPattern(`task-${task.id}/check-item-*`, () => {\n      reloadCheckItemsDebounce()\n    })\n\n    return function () {\n      removeListener()\n    }\n  }, [container.ws, reloadCheckItems, reloadCheckItemsDebounce, task.id])\n\n  const moveItem = useCallback((dragIndex, hoverIndex) => {\n    const item = checkItems[dragIndex]\n\n    setCheckItems(\n      update(checkItems, {\n        $splice: [\n          [dragIndex, 1],\n          [hoverIndex, 0, item]\n        ]\n      })\n    )\n  }, [checkItems])\n\n  const updateItemOrders = useCallback(\n    debounce(() => {\n      const orderUpdates = []\n\n      for (const index in checkItems) {\n        const item = checkItems[index]\n        const order = parseInt(index)\n\n        if (item.order !== order) {\n          orderUpdates.push({\n            id: item.id,\n            order\n          })\n        }\n      }\n\n      async function doUpdate (columnOrderUpdates) {\n        const promises = []\n\n        for (const update of columnOrderUpdates) {\n          promises.push(edit(projectId, task.board.id, task.id, update.id, {\n            order: update.order\n          }))\n        }\n\n        await Promise.all(promises)\n      }\n\n      if (orderUpdates.length > 0) {\n        doUpdate(orderUpdates)\n      }\n    }, 500),\n    [task, checkItems]\n  )\n\n  return (\n    <TaskChecklistContext.Provider value={{\n      moveItem,\n      updateItemOrders\n    }}>\n      <h6 className=\"mt-3\"><FontAwesomeIcon icon={faTasks} /> Checklist</h6>\n      <div>\n        {checkItems.map((checkItem, index) => (\n          <CheckItem key={checkItem.id} task={task} index={index} checkItem={checkItem} />\n        ))}\n      </div>\n      <CheckItemAddInput task={task} nextOrder={nextOrder} />\n    </TaskChecklistContext.Provider>\n  )\n}\n\nfunction CheckItemAddInput ({ task, nextOrder }) {\n  const [text, setText] = useState('')\n  const [loading, setLoading] = useState(false)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const { projectId } = useParams()\n\n  const handleSubmit = useCallback(async (e) => {\n    e.preventDefault()\n    setLoading(true)\n\n    try {\n      await create(projectId, task.board.id, task.id, {\n        text,\n        order: nextOrder,\n        checked: false\n      })\n\n      setText('')\n    } catch (e) {\n      setErrorMessage(e.message)\n    } finally {\n      setLoading(false)\n    }\n  }, [nextOrder, projectId, task.board, task.id, text])\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <InputGroup>\n        <Input value={text} onChange={(e) => setText(e.target.value)} />\n        <InputGroupAddon addonType=\"append\">\n          <Button color=\"primary\" disabled={loading}>{ loading ? 'Wait' : 'Add' }</Button>\n        </InputGroupAddon>\n      </InputGroup>\n      {errorMessage && (\n        <div className=\"alert alert-danger\">\n          {errorMessage}\n        </div>\n      )}\n    </form>\n  )\n}\n\nfunction CheckItem ({ task, checkItem, index }) {\n  const { projectId } = useParams()\n  const { moveItem, updateItemOrders } = useContext(TaskChecklistContext)\n  const [editing, setEditing] = useState(false)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [text, setText] = useState(checkItem.text)\n  const [loading, setLoading] = useState(false)\n\n  useEffect(() => {\n    setText(checkItem.text)\n  }, [checkItem.text])\n\n  const ref = useRef(null)\n\n  const toggleEditing = () => setEditing(!editing)\n\n  function handleCheck (checked) {\n    edit(projectId, task.board.id, task.id, checkItem.id, {\n      checked\n    })\n  }\n\n  function handleRemove () {\n    destroy(projectId, task.board.id, task.id, checkItem.id)\n  }\n\n  async function handleSubmit (e) {\n    e.preventDefault()\n    setLoading(true)\n\n    try {\n      edit(projectId, task.board.id, task.id, checkItem.id, {\n        text\n      })\n\n      setEditing(false)\n    } catch (e) {\n      setErrorMessage(e.message)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const [, dropRef] = useDrop({\n    accept: ItemTypes.CHECK_ITEM,\n    hover (item, monitor) {\n      if (!ref.current) {\n        return\n      }\n\n      const dragIndex = item.index\n      const hoverIndex = index\n\n      if (dragIndex === hoverIndex) {\n        return\n      }\n\n      const hoverBoundingRect = ref.current.getBoundingClientRect()\n      const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2\n      const clientOffset = monitor.getClientOffset()\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top\n\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return\n      }\n\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return\n      }\n\n      moveItem(dragIndex, hoverIndex)\n\n      item.index = hoverIndex\n    },\n    drop () {\n      updateItemOrders()\n    }\n  })\n\n  const [{ opacity }, dragRef] = useDrag({\n    item: { ...checkItem, type: ItemTypes.CHECK_ITEM, index },\n    collect: monitor => ({\n      opacity: monitor.isDragging() ? 0 : 1\n    })\n  })\n\n  dragRef(dropRef(ref))\n\n  return (\n    <CheckItemWrapper style={{ opacity }} ref={ref}>\n      {editing ? (\n        <form onSubmit={handleSubmit}>\n          <InputGroup>\n            <Input value={text} onChange={(e) => setText(e.target.value)} />\n            <InputGroupAddon addonType=\"append\">\n              <Button color=\"primary\" disabled={loading}>{ loading ? 'Wait' : 'Save' }</Button>\n            </InputGroupAddon>\n          </InputGroup>\n          {errorMessage && (\n            <div className=\"alert alert-danger\">\n              {errorMessage}\n            </div>\n          )}\n        </form>\n      ) : (\n        <React.Fragment>\n          <Checkbox checked={checkItem.checked} onChange={handleCheck} />\n          &nbsp;\n          {checkItem.text}\n          <span className=\"pull-right\">\n            <FontAwesomeIcon className=\"action\" icon={faPen} onClick={toggleEditing} />\n            &nbsp;\n            <FontAwesomeIcon className=\"action\" icon={faTimes} onClick={handleRemove} />\n          </span>\n        </React.Fragment>\n      )}\n    </CheckItemWrapper>\n  )\n}\n\nconst CheckItemWrapper = styled.div`\n  .action {\n    display: none;\n  }\n\n  &:hover .action {\n    display: inline;\n    cursor: pointer;\n  }\n`\n","import { request } from '../../../core/client'\nimport { serialize, deserialize } from 'jsonapi-fractal'\n\nexport async function list (projectId, boardId, taskId) {\n  const response = await request({\n    method: 'GET',\n    url: `/dashboard/projects/${projectId}/boards/${boardId}/tasks/${taskId}/comments`\n  })\n\n  return deserialize(response.data)\n}\n\nexport async function create (projectId, boardId, taskId, comment) {\n  let response\n\n  try {\n    response = await request({\n      method: 'POST',\n      url: `/dashboard/projects/${projectId}/boards/${boardId}/tasks/${taskId}/comments`,\n      data: serialize(comment, 'comments')\n    })\n  } catch (e) {\n    throw new Error(e.response.data.errors[0].detail)\n  }\n\n  return deserialize(response.data)\n}\n\nexport async function edit (projectId, boardId, taskId, id, comment) {\n  let response\n\n  try {\n    response = await request({\n      method: 'PATCH',\n      url: `/dashboard/projects/${projectId}/boards/${boardId}/tasks/${taskId}/comments/${id}`,\n      data: serialize(comment, 'comments')\n    })\n  } catch (e) {\n    throw new Error(e.response.data.errors[0].detail)\n  }\n\n  return deserialize(response.data)\n}\n\nexport async function destroy (projectId, boardId, taskId, id) {\n  await request({\n    method: 'DELETE',\n    url: `/dashboard/projects/${projectId}/boards/${boardId}/tasks/${taskId}/comments/${id}`\n  })\n}\n","import { request, serializeQueryString } from '../../../core/client'\nimport { deserialize } from 'jsonapi-fractal'\n\nexport async function list (projectId, boardId, taskId, queryString) {\n  const queryStringText = queryString ? serializeQueryString(queryString) : null\n  const append = queryStringText ? '?' + queryStringText : ''\n\n  const response = await request({\n    method: 'GET',\n    url: `/dashboard/projects/${projectId}/boards/${boardId}/tasks/${taskId}/task-activities` + append\n  })\n\n  return deserialize(response.data)\n}\n","import parseISO from 'date-fns/parseISO'\nimport { utcToZonedTime, format } from 'date-fns-tz'\n\nexport function formatLocalTime (date, pattern = \"MMM',' d yyyy 'at' HH:mm a\") {\n  if (!date) {\n    return ''\n  }\n\n  if (!(date instanceof Date)) {\n    date = parseISO(date)\n  }\n\n  const localTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone\n\n  date = utcToZonedTime(date, localTimeZone)\n\n  return format(date, pattern)\n}\n","import React, { useState, useCallback, useEffect, useMemo, useContext } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faList, faTimes, faPen } from '@fortawesome/free-solid-svg-icons'\nimport Avatar from '../../../users/components/avatar'\nimport DashboardContext from '../../../app/components/dashboard/context'\nimport TextArea from '../../../theme/components/text-area'\nimport Markdown from '../../../theme/components/markdown'\nimport { useParams } from 'react-router-dom'\nimport {\n  list as listComment,\n  create as createComment,\n  destroy as destroyComment,\n  edit as editComment\n} from '../../services/comment-service'\nimport { list as listActivity } from '../../services/task-activity-service'\nimport sortBy from 'lodash.sortby'\nimport debounce from 'debounce'\nimport parseISO from 'date-fns/parseISO'\nimport styled from 'styled-components'\nimport Container from '../../../../core/container'\nimport { formatLocalTime } from '../../../../core/services/date-service'\n\nexport default function TaskActivity ({ task }) {\n  const [comment, setComment] = useState('')\n  const [focused, setFocused] = useState(false)\n  const [saving, setSaving] = useState(false)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const { projectId } = useParams()\n  const showSave = comment || focused\n  const [{ comments, histories }, setActivities] = useState({\n    comments: [],\n    histories: []\n  })\n  const container = useContext(Container)\n\n  const loadActivity = useCallback(async () => {\n    const comments = await listComment(projectId, task.board.id, task.id)\n    const histories = await listActivity(projectId, task.board.id, task.id, {\n      include: 'user'\n    })\n\n    setActivities({ comments, histories })\n  }, [projectId, task.board.id, task.id])\n\n  const reloadActivity = useCallback(debounce(loadActivity, 500), [loadActivity])\n\n  useEffect(() => {\n    const removeCommentListener = container.ws.onPattern(`task-${task.id}/comment-*`, () => {\n      reloadActivity()\n    })\n\n    const removeHistoryListener = container.ws.onPattern(`task-${task.id}/activity`, () => {\n      reloadActivity()\n    })\n\n    return function () {\n      removeCommentListener()\n      removeHistoryListener()\n    }\n  }, [container.ws, reloadActivity, task.id])\n\n  useEffect(() => {\n    loadActivity()\n  }, [loadActivity])\n\n  function onFocus () {\n    setFocused(true)\n  }\n\n  function onBlur () {\n    setFocused(false)\n  }\n\n  async function handleSave (e) {\n    setSaving(true)\n\n    try {\n      await createComment(projectId, task.board.id, task.id, {\n        text: comment\n      })\n\n      setComment('')\n    } catch (e) {\n      setErrorMessage(e.message)\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  const activities = useMemo(() => {\n    const activities = []\n\n    for (const comment of comments) {\n      activities.push({\n        activityType: 'comment',\n        ...comment\n      })\n    }\n\n    for (const history of histories) {\n      activities.push({\n        activityType: 'history',\n        ...history\n      })\n    }\n\n    return sortBy(activities, function (item) {\n      if (item.createdAt) {\n        return parseISO(item.createdAt)\n      }\n\n      if (item.date) {\n        return parseISO(item.date)\n      }\n    }).reverse()\n  }, [comments, histories])\n\n  return (\n    <div>\n      <h6 className=\"mt-3\"><FontAwesomeIcon icon={faList} /> Activity</h6>\n      <div className=\"row\">\n        <div className=\"col-md-1\">\n          <Avatar size=\"120%\" />\n        </div>\n        <div className=\"col-md-11\">\n          <TextArea onFocus={onFocus} onBlur={onBlur} value={comment} onChange={setComment} />\n          {showSave && <button type=\"button\" disabled={saving} className=\"btn btn-primary btn-sm\" onClick={handleSave}>Save</button>}\n          {errorMessage && <div className=\"alert alert-danger\">{errorMessage}</div>}\n        </div>\n      </div>\n      <div>\n        {activities.map((activity, index) => (\n          <Activity activity={activity} task={task} key={index} />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nfunction Activity (props) {\n  const activity = props.activity\n\n  if (activity.activityType === 'history') {\n    return <HistoryActivity {...props} />\n  } else {\n    return <CommentActivity {...props} />\n  }\n}\n\nfunction CommentActivity ({ activity, task }) {\n  const { projectId } = useParams()\n  const { userId } = useContext(DashboardContext)\n  const [editing, setEditing] = useState(false)\n  const [text, setText] = useState(activity.text)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [saving, setSaving] = useState(false)\n\n  const startEdit = () => setEditing(true)\n\n  useEffect(() => {\n    setText(activity.text)\n  }, [activity.text])\n\n  function removeComment () {\n    destroyComment(projectId, task.board.id, task.id, activity.id)\n  }\n\n  async function handleSave (e) {\n    setSaving(true)\n\n    try {\n      await editComment(projectId, task.board.id, task.id, activity.id, {\n        text\n      })\n\n      setEditing(false)\n    } catch (e) {\n      setErrorMessage(e.message)\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  return (\n    <ActivityWrapper className=\"row\">\n      <div className=\"col-md-1\">\n        <Avatar size=\"120%\" />\n      </div>\n      <div className=\"col-md-11\">\n        {editing ? (\n          <React.Fragment>\n            <TextArea value={text} onChange={setText} />\n            <button type=\"button\" disabled={saving} className=\"btn btn-primary btn-sm\" onClick={handleSave}>Save</button>\n            {errorMessage && <div className=\"alert alert-danger\">{errorMessage}</div>}\n          </React.Fragment>\n        ) : (\n          <div>\n            <Markdown value={text} />\n          </div>\n        )}\n        <div className=\"date\">\n          {formatLocalTime(activity.createdAt)}\n        </div>\n        {userId === activity.user.id && (\n          <div className=\"actions\">\n            <span className=\"action-link\" onClick={startEdit}>\n              <FontAwesomeIcon icon={faPen} /> Edit\n            </span>\n            &nbsp;\n            <span className=\"action-link\" onClick={removeComment}>\n              <FontAwesomeIcon icon={faTimes} /> Remove\n            </span>\n          </div>\n        )}\n      </div>\n    </ActivityWrapper>\n  )\n}\n\nfunction HistoryActivity ({ activity, task }) {\n  let historyDescription = null\n\n  if (activity.activityType === 'history') {\n    historyDescription = makeHistoryDescription(activity)\n\n    if (!historyDescription) {\n      return <React.Fragment />\n    }\n  }\n\n  return (\n    <ActivityWrapper className=\"row\">\n      <div className=\"col-md-1\">\n        <Avatar size=\"120%\" />\n      </div>\n      <div className=\"col-md-11\">\n        <div>\n          <span>{historyDescription}</span>\n        </div>\n        <div className=\"date\">\n          {formatLocalTime(activity.date)}\n        </div>\n      </div>\n    </ActivityWrapper>\n  )\n}\n\nfunction makeHistoryDescription (activity) {\n  const userName = activity.user.firstName\n\n  if (activity.type === 'created') {\n    return `${userName} created the task`\n  }\n\n  if (activity.type === 'updated') {\n    if (activity.data.updated.storyPoints) {\n      return `${userName} changed the story points to ${activity.data.updated.storyPoints}`\n    }\n\n    if (activity.data.updated.name) {\n      return `${userName} changed the task name to ${activity.data.updated.name}`\n    }\n  }\n\n  if (activity.type === 'check-list-update') {\n    const before = activity.data.before\n    const after = activity.data.after\n\n    if (!before.checked && after.checked) {\n      return `${userName} checked the item ${after.text}`\n    }\n\n    if (before.checked && !after.checked) {\n      return `${userName} unchecked the item ${after.text}`\n    }\n  }\n}\n\nconst ActivityWrapper = styled.div`\n  .date {\n    color: #666;\n    font-size: 0.8em;\n  }\n\n  .actions {\n    .action-link {\n      cursor: pointer;\n      color: #666;\n      font-size: 0.8em;\n\n      &:hover {\n        text-decoration: underline;\n      }\n    }\n  }\n`\n","import React, { useState, useEffect, useCallback, useContext } from 'react'\nimport LoadingContent from '../../../theme/components/loading-content'\nimport EditableText from '../../../theme/components/editable-text'\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap'\nimport { get, edit, destroy, moveToSprint, moveToBacklog } from '../../services/task-service'\nimport { useParams } from 'react-router-dom'\nimport styled from 'styled-components'\nimport Container from '../../../../core/container'\nimport TaskDescription from '../task-description'\nimport TaskChecklist from '../task-checklist'\nimport TaskActivity from '../task-activity'\n\nexport default function Task (props) {\n  const [booting, setBooting] = useState(false)\n  const [task, setTask] = useState(null)\n  const [deleting, setDeleting] = useState(false)\n  const [moving, setMoving] = useState(false)\n  const params = useParams()\n  const container = useContext(Container)\n\n  const refreshTask = useCallback(async () => {\n    let task\n\n    try {\n      task = await get(params.projectId, props.boardId, params.taskId, {\n        include: 'board'\n      })\n    } catch (e) {\n      if (e.response && e.response.status === 404) {\n        task = null\n      }\n    }\n\n    setTask(task)\n  }, [params.projectId, params.taskId, props.boardId])\n\n  async function remove () {\n    setDeleting(true)\n\n    await destroy(params.projectId, props.boardId, params.taskId)\n\n    props.toggle()\n  }\n\n  async function move () {\n    setMoving(true)\n\n    if (task.board.type === 'sprint') {\n      await moveToBacklog(params.projectId, props.boardId, params.taskId)\n    } else {\n      await moveToSprint(params.projectId, props.boardId, params.taskId)\n    }\n\n    props.toggle()\n  }\n\n  useEffect(() => {\n    setBooting(true)\n\n    async function boot () {\n      await refreshTask()\n      setBooting(false)\n    }\n\n    boot()\n  }, [params.projectId, params.taskId, props.boardId, refreshTask])\n\n  useEffect(() => {\n    if (!task) {\n      return\n    }\n\n    container.ws.join(`task-${task.id}`)\n\n    return function () {\n      container.ws.leave(`task-${task.id}`)\n    }\n  }, [container.ws, task])\n\n  useEffect(() => {\n    if (!task) {\n      return\n    }\n\n    const removeTaskListener = container.ws.onPattern(`task-${task.id}/task-*`, () => {\n      refreshTask()\n    })\n\n    return function () {\n      removeTaskListener()\n    }\n  }, [container.ws, refreshTask, task])\n\n  const handleChangeName = useCallback((text) => {\n    edit(params.projectId, props.boardId, params.taskId, {\n      name: text\n    })\n  }, [params.projectId, params.taskId, props.boardId])\n\n  const handleChangeStoryPoints = useCallback((number) => {\n    edit(params.projectId, props.boardId, params.taskId, {\n      storyPoints: number ? parseInt(number) : null\n    })\n  }, [params.projectId, params.taskId, props.boardId])\n\n  if (task === null) {\n    if (booting) {\n      return (\n        <Modal isOpen={props.isOpen} toggle={props.toggle} size=\"xl\">\n          <ModalHeader toggle={props.toggle}>\n            Loading task\n          </ModalHeader>\n          <ModalBody>\n            <LoadingContent />\n          </ModalBody>\n        </Modal>\n      )\n    } else {\n      return (\n        <Modal isOpen={props.isOpen} toggle={props.toggle} size=\"xl\">\n          <ModalHeader toggle={props.toggle}>\n            Task not found\n          </ModalHeader>\n          <ModalBody>\n            The requested task was not found in this board\n          </ModalBody>\n        </Modal>\n      )\n    }\n  }\n\n  return (\n    <Modal isOpen={props.isOpen} toggle={props.toggle} size=\"xl\">\n      <ModalHeader toggle={props.toggle}>\n        <EditableText text={task.name} onChange={handleChangeName} />\n      </ModalHeader>\n      <ModalBody>\n        <div className=\"row\">\n          <div className=\"col-md-9\">\n            <div className=\"row\">\n              <div className=\"col-md-2\">\n                <OptionField>\n                  <div className=\"option-field-label\">\n                    Story Points\n                  </div>\n                  <select value={task.storyPoints || ''} onChange={(ev) => handleChangeStoryPoints(ev.target.value)}>\n                    <option value=\"\"></option>\n                    <option value=\"1\">1</option>\n                    <option value=\"2\">2</option>\n                    <option value=\"3\">3</option>\n                    <option value=\"5\">5</option>\n                    <option value=\"8\">8</option>\n                    <option value=\"13\">13</option>\n                    <option value=\"20\">20</option>\n                    <option value=\"40\">40</option>\n                    <option value=\"100\">100</option>\n                  </select>\n                </OptionField>\n              </div>\n            </div>\n            <TaskDescription task={task} />\n            <TaskChecklist task={task} />\n            <TaskActivity task={task} />\n          </div>\n          <ActionColumn className=\"col-md-3\">\n            <div className=\"action-btn btn btn-danger\" onClick={remove} disabled={deleting}>\n              {deleting ? 'Removing' : 'Remove'}\n            </div>\n            <div className=\"action-btn btn btn-info\" onClick={move} disabled={moving}>\n              {task.board.type === 'sprint' ? 'Move to backlog' : 'Move to sprint'}\n            </div>\n          </ActionColumn>\n        </div>\n      </ModalBody>\n    </Modal>\n  )\n}\n\nconst ActionColumn = styled.div`\n  .btn:first-child {\n    margin-top: 0;\n  }\n\n  .action-btn {\n    width: 100%;\n  }\n`\n\nconst OptionField = styled.div`\n  background-color: #eee !important;\n  padding: 0.5em;\n\n  .option-field-label {\n    font-weight: bold;\n    font-size: 0.7em;\n  }\n\n  select {\n    margin-top: 0.3em;\n    padding: 0.5em;\n    background-color: white !important;\n    border: none !important;\n    border-radius: 0 !important;\n    width: 100%;\n  }\n`\n","import { createContext } from 'react'\n\nexport default createContext(null)\n","import React, { useState, useContext } from 'react'\nimport LoadingContent from '../../../theme/components/loading-content'\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap'\nimport { get, create, edit } from '../../services/column-service'\nimport BoardContext from '../board-page/board-context'\n\nexport default function ColumnFormModal (props) {\n  const { columnId } = props\n  const [name, setName] = useState('')\n  const [error, setError] = useState(null)\n  const [column, setColumn] = useState({})\n  const [loading, setLoading] = useState(false)\n  const { boardId, projectId } = useContext(BoardContext)\n\n  if (columnId && !column.id && !loading) {\n    setLoading(true)\n    get(projectId, boardId, columnId).then((response) => {\n      setColumn(response)\n      setName(response.name)\n      setLoading(false)\n    })\n  }\n\n  function toggle () {\n    setName('')\n    setError(null)\n    props.toggle()\n  }\n\n  async function save () {\n    try {\n      const data = { ...column, name }\n\n      if (columnId) {\n        await edit(projectId, boardId, columnId, data)\n      } else {\n        data.order = props.nextColumnOrder\n        data.type = 'other'\n        await create(projectId, boardId, data)\n      }\n\n      if ('onSave' in props) {\n        props.onSave()\n      }\n\n      toggle()\n    } catch (e) {\n      setError(e.message)\n    }\n  }\n\n  return (\n    <Modal isOpen={props.isOpen} toggle={toggle}>\n      <ModalHeader toggle={toggle}>\n        {columnId ? 'Edit column' : 'Create column'}\n      </ModalHeader>\n      <ModalBody>\n        {loading ? (\n          <LoadingContent />\n        ) : (\n          <div className=\"form-group\">\n            <label>Name</label>\n            <input type=\"text\" className=\"form-control\" value={name} onChange={(e) => setName(e.target.value)} />\n          </div>\n        )}\n        {error && <div className=\"alert alert-danger\">{error}</div>}\n      </ModalBody>\n      <ModalFooter>\n        {!loading && (\n          <button className=\"btn btn-primary btn-round\" onClick={save}>\n            {columnId ? 'Edit' : 'Create'}\n          </button>\n        )}\n      </ModalFooter>\n    </Modal>\n  )\n}\n","import React from 'react'\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap'\n\nexport default function ConfirmModal (props) {\n  return (\n    <Modal isOpen={props.isOpen} toggle={props.toggle}>\n      <ModalHeader toggle={props.toggle}>\n        Attention\n      </ModalHeader>\n      <ModalBody>\n        <div class=\"alert alert-warning\">\n          {props.message}\n        </div>\n      </ModalBody>\n      <ModalFooter>\n        <button className=\"btn btn-primary btn-round\" onClick={props.onConfirm}>\n          Yes\n        </button>\n        &nbsp;\n        <button className=\"btn btn-danger btn-round\" onClick={props.toggle}>\n          No\n        </button>\n      </ModalFooter>\n    </Modal>\n  )\n}\n","import React, { useState, useContext } from 'react'\nimport {\n  Input,\n  InputGroup,\n  InputGroupAddon,\n  Button\n} from 'reactstrap'\nimport { create } from '../../services/task-service'\nimport BoardContext from '../../../boards/components/board-page/board-context'\n\nexport default function TaskAddInput ({ columnId, lastTaskOrder }) {\n  const [name, setName] = useState('')\n  const [loading, setLoading] = useState(false)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const { boardId, projectId } = useContext(BoardContext)\n\n  async function onSubmit (ev) {\n    ev.preventDefault()\n    setLoading(true)\n    setErrorMessage(null)\n\n    try {\n      const task = {\n        name,\n        column: columnId,\n        order: lastTaskOrder + 1\n      }\n\n      await create(projectId, boardId, task)\n\n      setName('')\n    } catch (e) {\n      setErrorMessage(e.message)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <form onSubmit={onSubmit}>\n      <InputGroup>\n        <Input value={name} onChange={(e) => setName(e.target.value)} />\n        <InputGroupAddon addonType=\"append\">\n          <Button color=\"primary\" disabled={loading}>{ loading ? 'Wait' : 'Add' }</Button>\n        </InputGroupAddon>\n      </InputGroup>\n      {errorMessage && (\n        <div className=\"alert alert-danger\">\n          {errorMessage}\n        </div>\n      )}\n    </form>\n  )\n}\n","import React, { useRef, useContext, useCallback } from 'react'\nimport { useDrag, useDrop } from 'react-dnd'\nimport { ItemTypes } from '../../../app/dnd'\nimport BoardContext from '../../../boards/components/board-page/board-context'\nimport { useLocation, useHistory } from 'react-router-dom'\nimport styled from 'styled-components'\n\nexport default function TaskCard ({ task, columnId, index }) {\n  const {\n    projectId,\n    moveTask,\n    updateTaskOrders\n  } = useContext(BoardContext)\n\n  const ref = useRef(null)\n\n  const location = useLocation()\n  const history = useHistory()\n\n  let taskUrl = `/dashboard/projects/${projectId}/backlog/tasks/${task.id}`\n\n  if (/sprints/.test(location.pathname)) {\n    const match = location.pathname.match(/sprints\\/([^/]+)/)\n    taskUrl = `/dashboard/projects/${projectId}/sprints/${match[1]}/tasks/${task.id}`\n  }\n\n  const openTask = useCallback(() => {\n    history.push(taskUrl)\n  }, [history, taskUrl])\n\n  const [, dropRef] = useDrop({\n    accept: ItemTypes.TASK,\n    hover (item, monitor) {\n      if (!ref.current) {\n        return\n      }\n\n      const dragIndex = item.index\n      const hoverIndex = index\n      const dragColumnId = item.columnId\n      const hoverColumnId = columnId\n\n      if (dragIndex === hoverIndex && dragColumnId === hoverColumnId) {\n        return\n      }\n\n      const hoverBoundingRect = ref.current.getBoundingClientRect()\n      const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2\n      const clientOffset = monitor.getClientOffset()\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top\n\n      if (dragColumnId === hoverColumnId && dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return\n      }\n\n      if (dragColumnId === hoverColumnId && dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return\n      }\n\n      moveTask(dragColumnId, dragIndex, hoverColumnId, hoverIndex)\n\n      item.index = hoverIndex\n      item.columnId = hoverColumnId\n    },\n    drop () {\n      updateTaskOrders()\n    }\n  })\n\n  const [{ opacity }, dragRef] = useDrag({\n    item: { ...task, type: ItemTypes.TASK, columnId, index },\n    collect: monitor => ({\n      opacity: monitor.isDragging() ? 0 : 1\n    })\n  })\n\n  dragRef(dropRef(ref))\n\n  return (\n    <Card className=\"card\" ref={ref} style={{ opacity }} onClick={openTask}>\n      <div className=\"card-body\">\n        {task.name}\n        {task.storyPoints ? (\n          <span className=\"badge badge-info pull-right\">\n            {task.storyPoints}\n          </span>\n        ) : null}\n      </div>\n    </Card>\n  )\n}\n\nconst Card = styled.div`\n  cursor: pointer;\n`\n","import React, { useState, useRef, useContext, useMemo } from 'react'\nimport styled from 'styled-components'\nimport ColumnFormModal from '../column-form-modal'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faEdit, faTrash } from '@fortawesome/free-solid-svg-icons'\nimport ConfirmModal from '../../../theme/components/confirm-modal'\nimport { destroy } from '../../services/column-service'\nimport { useDrag, useDrop } from 'react-dnd'\nimport { ItemTypes } from '../../../app/dnd'\nimport TaskAddInput from '../../../tasks/components/task-add-input'\nimport TaskCard from '../../../tasks/components/task-card'\nimport BoardContext from '../board-page/board-context'\n\nexport default function Column (props) {\n  const {\n    tasks,\n    column,\n    index\n  } = props\n\n  const [columnForm, setColumnForm] = useState(false)\n  const [deleteModal, setDeleteModal] = useState(false)\n\n  const sumStoryPoints = useMemo(() => {\n    return tasks.reduce((acc, task) => acc + (task.storyPoints || 0), 0)\n  }, [tasks])\n\n  const {\n    boardId,\n    projectId,\n    moveColumn,\n    moveTask,\n    updateColumnOrders,\n    updateTaskOrders,\n    refreshColumns\n  } = useContext(BoardContext)\n\n  const toggleColumnForm = () => setColumnForm(!columnForm)\n  const toggleDeleteModal = () => setDeleteModal(!deleteModal)\n\n  const ref = useRef(null)\n\n  const [, dropRef] = useDrop({\n    accept: [ItemTypes.COLUMN, ItemTypes.TASK],\n    hover (item, monitor) {\n      if (item.type === ItemTypes.COLUMN) {\n        if (!ref.current) {\n          return\n        }\n\n        const dragIndex = item.index\n        const hoverIndex = index\n\n        if (dragIndex === hoverIndex) {\n          return\n        }\n\n        const hoverBoundingRect = ref.current.getBoundingClientRect()\n        const hoverMiddleX = (hoverBoundingRect.right - hoverBoundingRect.left) / 2\n        const clientOffset = monitor.getClientOffset()\n        const hoverClientX = clientOffset.x - hoverBoundingRect.left\n\n        if (dragIndex < hoverIndex && hoverClientX < hoverMiddleX) {\n          return\n        }\n\n        if (dragIndex > hoverIndex && hoverClientX > hoverMiddleX) {\n          return\n        }\n\n        moveColumn(dragIndex, hoverIndex)\n\n        item.index = hoverIndex\n      } else if (item.type === ItemTypes.TASK) {\n        if (item.columnId !== column.id) {\n          moveTask(item.columnId, item.index, column.id, tasks.length)\n          item.columnId = column.id\n          item.index = tasks.length\n        }\n      }\n    },\n    drop (item, monitor) {\n      if (item.type === ItemTypes.COLUMN) {\n        updateColumnOrders()\n      } else if (item.type === ItemTypes.TASK) {\n        updateTaskOrders()\n      }\n    }\n  })\n\n  const [{ isDragging }, dragRef, previewRef] = useDrag({\n    item: { type: ItemTypes.COLUMN, id: column.id, index },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  })\n\n  async function removeColumn () {\n    toggleDeleteModal()\n    await destroy(projectId, boardId, column.id)\n    refreshColumns()\n  }\n\n  const columnDivClasses = ['col-md-3']\n\n  if (isDragging) {\n    columnDivClasses.push('is-dragging')\n  }\n\n  previewRef(dropRef(ref))\n\n  const lastTaskOrder = tasks.reduce((acc, task) => {\n    if (task.order > acc) {\n      return task.order\n    }\n\n    return acc\n  }, -1)\n\n  return (\n    <ColumnDiv className={columnDivClasses.join(' ')} ref={ref}>\n      <ColumnTitle className=\"card\" ref={dragRef}>\n        {column.name}\n        <Options>\n          {sumStoryPoints > 0 ? (\n            <span className=\"badge badge-info badge-story-points pull-right\">\n              {sumStoryPoints}\n            </span>\n          ) : null }\n\n          {column.type === 'other' && (\n            <React.Fragment>\n              <button className=\"btn btn-primary btn-sm\" onClick={toggleColumnForm}>\n                <FontAwesomeIcon icon={faEdit} />\n              </button>\n              {columnForm && (\n                <ColumnFormModal\n                  isOpen={columnForm}\n                  toggle={toggleColumnForm}\n                  projectId={projectId}\n                  boardId={boardId}\n                  columnId={column.id}\n                  onSave={refreshColumns} />\n              )}\n              <button className=\"btn btn-danger btn-sm\" onClick={toggleDeleteModal}>\n                <FontAwesomeIcon icon={faTrash} />\n              </button>\n              <ConfirmModal\n                isOpen={deleteModal}\n                toggle={toggleDeleteModal}\n                message=\"Are you sure you want to remove this column\"\n                onConfirm={removeColumn} />\n            </React.Fragment>\n          )}\n        </Options>\n      </ColumnTitle>\n      <ColumnBody>\n        {tasks.map((task, index) => (\n          <TaskCard\n            key={task.id}\n            index={index}\n            columnId={column.id}\n            task={task}\n          />\n        ))}\n        <TaskAddInput\n          columnId={column.id}\n          lastTaskOrder={lastTaskOrder}\n        />\n      </ColumnBody>\n    </ColumnDiv>\n  )\n}\n\nconst ColumnDiv = styled.div`\n  border-right: 1px dashed #ccc;\n  min-height: calc(100vh - 130px);\n\n  &.is-dragging {\n    opacity: 0;\n  }\n`\n\nconst ColumnTitle = styled.div`\n  font-size: 1em;\n  font-weight: bold;\n  text-transform: uppercase;\n  padding: 0.55em 1em;\n  background: linear-gradient(145deg, rgba(61,42,178,1) 0%, rgba(92,57,186,1) 45%, rgba(183,100,211,1) 100%) !important;\n  color: white !important;\n  position: relative;\n\n  .badge-story-points {\n    font-size: 1.2em;\n    margin: 0.35em 0 0 0.5em;\n  }\n`\n\nconst Options = styled.div`\n  position: absolute;\n  right: 6px;\n  top: 0;\n\n  .btn {\n    margin-top: 0.5em !important;\n    margin-left: 0.5em;\n  }\n`\n\nconst ColumnBody = styled.div`\n`\n","import React, { useState, useCallback, useContext, useEffect } from 'react'\nimport { useProjectId } from '../../../projects/hooks'\nimport {\n  list as listColumns,\n  edit as editColumn\n} from '../../services/column-service'\nimport debounce from 'debounce'\nimport {\n  list as listTasks,\n  edit as editTask\n} from '../../../tasks/services/task-service'\nimport LoadingContent from '../../../theme/components/loading-content'\nimport { Switch, Route, useHistory, useLocation } from 'react-router-dom'\nimport TaskModal from '../../../tasks/components/task-modal'\nimport ColumnFormModal from '../column-form-modal'\nimport Column from '../column'\nimport styled from 'styled-components'\nimport update from 'immutability-helper'\nimport Container from '../../../../core/container'\nimport BoardContext from './board-context'\n\nconst listTasksOpts = {\n  fields: {\n    tasks: 'name,order,storyPoints,column,board'\n  }\n}\n\nexport default function BoardPage (props) {\n  const { board } = props\n  const projectId = useProjectId()\n  const [bootState, setBootState] = useState({ booting: true })\n  const { booting, tasks, columns } = bootState\n  const setColumns = useCallback((columns) => {\n    setBootState({ ...bootState, columns })\n  }, [bootState])\n  const setTasks = useCallback((tasks) => {\n    setBootState({ ...bootState, tasks })\n  }, [bootState])\n  const [columnForm, setColumnForm] = useState(false)\n  const [tasksByColumn, setTasksByColumn] = useState({})\n  const container = useContext(Container)\n  const history = useHistory()\n  const location = useLocation()\n\n  const toggleTaskModal = useCallback(() => {\n    const newPath = location.pathname.replace(/\\/tasks.+/, '')\n    history.push(newPath)\n  }, [history, location.pathname])\n\n  useEffect(() => {\n    container.ws.join(`board-${board.id}`)\n\n    return function () {\n      container.ws.leave(`board-${board.id}`)\n    }\n  }, [board.id, container.ws])\n\n  const toggleColumnForm = () => setColumnForm(!columnForm)\n\n  const refreshColumns = useCallback(\n    debounce(() => {\n      listColumns(projectId, board.id).then(setColumns)\n    }, 500),\n    [projectId, board.id, setColumns]\n  )\n\n  const refreshTasks = useCallback(\n    debounce(() => {\n      listTasks(projectId, board.id, listTasksOpts).then(setTasks)\n    }, 500),\n    [projectId, board.id, setTasks]\n  )\n\n  useEffect(() => {\n    const removeColumnListener = container.ws.onPattern(`board-${board.id}/column-*`, () => {\n      refreshColumns()\n    })\n\n    const removeTaskListener = container.ws.onPattern(`board-${board.id}/task-*`, () => {\n      refreshTasks()\n    })\n\n    return function () {\n      removeColumnListener()\n      removeTaskListener()\n    }\n  }, [projectId, board.id, container.ws, refreshColumns, refreshTasks])\n\n  useEffect(() => {\n    const result = {}\n\n    if (booting) {\n      return\n    }\n\n    if (columns) {\n      for (const column of columns) {\n        if (tasks) {\n          result[column.id] = filterTasks(tasks, column.id)\n        } else {\n          result[column.id] = []\n        }\n      }\n    }\n\n    setTasksByColumn(result)\n  }, [columns, tasks, setTasksByColumn, booting])\n\n  const moveColumn = useCallback(\n    (dragIndex, hoverIndex) => {\n      const dragColumn = columns[dragIndex]\n\n      setColumns(\n        update(columns, {\n          $splice: [\n            [dragIndex, 1],\n            [hoverIndex, 0, dragColumn]\n          ]\n        })\n      )\n    },\n    [columns, setColumns]\n  )\n\n  const updateColumnOrders = useCallback(\n    debounce(() => {\n      const columnOrderUpdates = []\n\n      for (const index in columns) {\n        const column = columns[index]\n        const order = parseInt(index)\n\n        if (column.order !== order) {\n          columnOrderUpdates.push({\n            id: column.id,\n            order\n          })\n        }\n      }\n\n      async function doUpdate (columnOrderUpdates) {\n        const promises = []\n\n        for (const update of columnOrderUpdates) {\n          promises.push(editColumn(projectId, board.id, update.id, {\n            order: update.order\n          }))\n        }\n\n        await Promise.all(promises)\n        listColumns(projectId, board.id).then(setColumns)\n      }\n\n      if (columnOrderUpdates.length > 0) {\n        doUpdate(columnOrderUpdates)\n      }\n    }, 500),\n    [board.id, columns, projectId]\n  )\n\n  const updateTaskOrders = useCallback(\n    debounce(() => {\n      const updates = []\n\n      for (const columnId in tasksByColumn) {\n        for (const index in tasksByColumn[columnId]) {\n          const task = tasksByColumn[columnId][index]\n          const order = parseInt(index)\n\n          if (task.order !== order || task.column.id !== columnId) {\n            const update = {\n              id: task.id\n            }\n\n            if (task.order !== order) {\n              update.order = order\n            }\n\n            if (task.column.id !== columnId) {\n              update.column = columnId\n            }\n\n            updates.push(update)\n          }\n        }\n      }\n\n      async function doUpdate () {\n        const promises = []\n\n        for (const update of updates) {\n          promises.push(editTask(projectId, board.id, update.id, update))\n        }\n\n        await Promise.all(promises)\n      }\n\n      if (updates.length > 0) {\n        doUpdate()\n      }\n    }, 500),\n    [tasksByColumn]\n  )\n\n  const moveTask = useCallback(\n    (dragColumnId, dragIndex, hoverColumnId, hoverIndex) => {\n      const task = tasksByColumn[dragColumnId][dragIndex]\n\n      setTasksByColumn(\n        update(\n          update(tasksByColumn, {\n            [dragColumnId]: { $splice: [[dragIndex, 1]] }\n          }), {\n            [hoverColumnId]: { $splice: [[hoverIndex, 0, task]] }\n          }\n        )\n      )\n    },\n    [tasksByColumn]\n  )\n\n  useEffect(() => {\n    async function boot () {\n      const [columns, tasks] = await Promise.all([\n        listColumns(projectId, board.id),\n        listTasks(projectId, board.id, listTasksOpts)\n      ])\n\n      return {\n        ...bootState,\n        columns,\n        tasks,\n        booting: false\n      }\n    }\n\n    if (booting) {\n      boot().then(setBootState)\n    }\n  }, [board.id, bootState, booting, projectId])\n\n  if (booting) {\n    return <LoadingContent />\n  }\n\n  let lastColumnOrder = null\n\n  for (const column of columns) {\n    if (lastColumnOrder === null || column.order > lastColumnOrder) {\n      lastColumnOrder = column.order\n    }\n  }\n\n  const nextColumnOrder = lastColumnOrder + 1\n\n  return (\n    <BoardContext.Provider value={{\n      projectId,\n      boardId: board.id,\n      moveColumn,\n      updateColumnOrders,\n      updateTaskOrders,\n      refreshColumns,\n      moveTask\n    }}>\n      <div className=\"row\">\n        {columns.map((column, index) => (\n          <Column\n            key={column.id}\n            column={column}\n            tasks={tasksByColumn[column.id] || []}\n            index={index}\n          />\n        ))}\n        <div className=\"col-md-3\">\n          <AddButton className=\"btn btn-primary btn-round\" onClick={toggleColumnForm}>\n            + Add Column\n          </AddButton>\n        </div>\n      </div>\n      <ColumnFormModal\n        isOpen={columnForm}\n        toggle={toggleColumnForm}\n        nextColumnOrder={nextColumnOrder}\n        onSave={refreshColumns} />\n\n      <Switch>\n        <Route path=\"/dashboard/projects/:projectId/(backlog|sprints/current)/tasks/:taskId\">\n          <TaskModal\n            isOpen={true}\n            boardId={board.id}\n            toggle={toggleTaskModal} />\n        </Route>\n        <Route path=\"/dashboard/projects/:projectId/sprints/:sprintId/tasks/:taskId\">\n          <TaskModal\n            isOpen={true}\n            boardId={board.id}\n            toggle={toggleTaskModal} />\n        </Route>\n      </Switch>\n    </BoardContext.Provider>\n  )\n}\n\nfunction filterTasks (tasks, columnId) {\n  return tasks.filter((task) => {\n    return task.column.id === columnId\n  })\n}\n\nconst AddButton = styled.button`\n  margin-top: 0 !important;\n`\n"],"sourceRoot":""}